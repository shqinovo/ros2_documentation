# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2023, Open Robotics
# This file is distributed under the same license as the ROS 2 documentation
# package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2023.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: ROS 2 documentation \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2023-12-08 06:20+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language: zh_CN\n"
"Language-Team: zh_CN <LL@li.org>\n"
"Plural-Forms: nplurals=1; plural=0;\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.12.1\n"

#: ../../source/Tutorials/Intermediate/Composition.rst:7
msgid "Composing multiple nodes in a single process"
msgstr ""

#: ../../source/Tutorials/Intermediate/Composition.rst:11
msgid "Table of Contents"
msgstr ""

#: ../../source/Tutorials/Intermediate/Composition.rst:13
msgid "**Goal:** Compose multiple nodes into a single process."
msgstr ""

#: ../../source/Tutorials/Intermediate/Composition.rst:15
msgid "**Tutorial level:** Intermediate"
msgstr ""

#: ../../source/Tutorials/Intermediate/Composition.rst:17
msgid "**Time:** 20 minutes"
msgstr ""

#: ../../source/Tutorials/Intermediate/Composition.rst:20
msgid "Background"
msgstr ""

#: ../../source/Tutorials/Intermediate/Composition.rst:22
msgid ""
"See the :doc:`conceptual article <../../Concepts/Intermediate/About-"
"Composition>`."
msgstr ""

#: ../../source/Tutorials/Intermediate/Composition.rst:25
msgid "Run the demos"
msgstr ""

#: ../../source/Tutorials/Intermediate/Composition.rst:27
msgid ""
"The demos use executables from `rclcpp_components "
"<https://github.com/ros2/rclcpp/tree/rolling/rclcpp_components>`__, "
"`ros2component "
"<https://github.com/ros2/ros2cli/tree/rolling/ros2component>`__, and  "
"`composition <https://github.com/ros2/demos/tree/rolling/composition>`__ "
"packages, and can be run with the following commands."
msgstr ""

#: ../../source/Tutorials/Intermediate/Composition.rst:31
msgid "Discover available components"
msgstr ""

#: ../../source/Tutorials/Intermediate/Composition.rst:33
msgid ""
"To see what components are registered and available in the workspace, "
"execute the following in a shell:"
msgstr ""

#: ../../source/Tutorials/Intermediate/Composition.rst:39
msgid "The terminal will return the list of all available components:"
msgstr ""

#: ../../source/Tutorials/Intermediate/Composition.rst:54
msgid "Run-time composition using ROS services with a publisher and subscriber"
msgstr ""

#: ../../source/Tutorials/Intermediate/Composition.rst:56
#: ../../source/Tutorials/Intermediate/Composition.rst:213
#: ../../source/Tutorials/Intermediate/Composition.rst:279
msgid "In the first shell, start the component container:"
msgstr ""

#: ../../source/Tutorials/Intermediate/Composition.rst:62
msgid ""
"Open the second shell and verify that the container is running via "
"``ros2`` command line tools:"
msgstr ""

#: ../../source/Tutorials/Intermediate/Composition.rst:68
#: ../../source/Tutorials/Intermediate/Composition.rst:225
msgid "You should see a name of the component:"
msgstr ""

#: ../../source/Tutorials/Intermediate/Composition.rst:74
msgid ""
"In the second shell load the talker component (see `talker "
"<https://github.com/ros2/demos/blob/rolling/composition/src/talker_component.cpp>`__"
" source code):"
msgstr ""

#: ../../source/Tutorials/Intermediate/Composition.rst:80
msgid ""
"The command will return the unique ID of the loaded component as well as "
"the node name:"
msgstr ""

#: ../../source/Tutorials/Intermediate/Composition.rst:86
msgid ""
"Now the first shell should show a message that the component was loaded "
"as well as repeated message for publishing a message."
msgstr ""

#: ../../source/Tutorials/Intermediate/Composition.rst:88
msgid ""
"Run another command in the second shell to load the listener component "
"(see `listener "
"<https://github.com/ros2/demos/blob/rolling/composition/src/listener_component.cpp>`__"
" source code):"
msgstr ""

#: ../../source/Tutorials/Intermediate/Composition.rst:94
msgid "Terminal will return:"
msgstr ""

#: ../../source/Tutorials/Intermediate/Composition.rst:100
msgid ""
"The ``ros2`` command line utility can now be used to inspect the state of"
" the container:"
msgstr ""

#: ../../source/Tutorials/Intermediate/Composition.rst:106
msgid "You will see the following result:"
msgstr ""

#: ../../source/Tutorials/Intermediate/Composition.rst:114
msgid "Now the first shell should show repeated output for each received message."
msgstr ""

#: ../../source/Tutorials/Intermediate/Composition.rst:117
msgid "Run-time composition using ROS services with a server and client"
msgstr ""

#: ../../source/Tutorials/Intermediate/Composition.rst:119
msgid "The example with a server and a client is very similar."
msgstr ""

#: ../../source/Tutorials/Intermediate/Composition.rst:121
msgid "In the first shell:"
msgstr ""

#: ../../source/Tutorials/Intermediate/Composition.rst:127
msgid ""
"In the second shell (see `server "
"<https://github.com/ros2/demos/blob/rolling/composition/src/server_component.cpp>`__"
" and `client "
"<https://github.com/ros2/demos/blob/rolling/composition/src/client_component.cpp>`__"
" source code):"
msgstr ""

#: ../../source/Tutorials/Intermediate/Composition.rst:134
msgid ""
"In this case the client sends a request to the server, the server "
"processes the request and replies with a response, and the client prints "
"the received response."
msgstr ""

#: ../../source/Tutorials/Intermediate/Composition.rst:137
msgid "Compile-time composition using ROS services"
msgstr ""

#: ../../source/Tutorials/Intermediate/Composition.rst:139
msgid ""
"This demos shows that the same shared libraries can be reused to compile "
"a single executable running multiple components. The executable contains "
"all four components from above: talker and listener as well as server and"
" client."
msgstr ""

#: ../../source/Tutorials/Intermediate/Composition.rst:142
msgid ""
"In the shell call (see `source code "
"<https://github.com/ros2/demos/blob/rolling/composition/src/manual_composition.cpp>`__):"
msgstr ""

#: ../../source/Tutorials/Intermediate/Composition.rst:148
msgid ""
"This should show repeated messages from both pairs, the talker and the "
"listener as well as the server and the client."
msgstr ""

#: ../../source/Tutorials/Intermediate/Composition.rst:152
msgid ""
"Manually-composed components will not be reflected in the ``ros2 "
"component list`` command line tool output."
msgstr ""

#: ../../source/Tutorials/Intermediate/Composition.rst:155
msgid "Run-time composition using dlopen"
msgstr ""

#: ../../source/Tutorials/Intermediate/Composition.rst:157
msgid ""
"This demo presents an alternative to run-time composition by creating a "
"generic container process and explicitly passing the libraries to load "
"without using ROS interfaces. The process will open each library and "
"create one instance of each \"rclcpp::Node\" class in the library `source"
" code "
"<https://github.com/ros2/demos/blob/rolling/composition/src/dlopen_composition.cpp>`__)."
msgstr ""

#: ../../source/Tutorials/Intermediate/Composition.rst:162
msgid "Linux"
msgstr ""

#: ../../source/Tutorials/Intermediate/Composition.rst:168
msgid "macOS"
msgstr ""

#: ../../source/Tutorials/Intermediate/Composition.rst:174
msgid "Windows"
msgstr ""

#: ../../source/Tutorials/Intermediate/Composition.rst:180
msgid "to get the path to where composition is installed. Then call"
msgstr ""

#: ../../source/Tutorials/Intermediate/Composition.rst:186
msgid ""
"Now the shell should show repeated output for each sent and received "
"message."
msgstr ""

#: ../../source/Tutorials/Intermediate/Composition.rst:190
msgid ""
"dlopen-composed components will not be reflected in the ``ros2 component "
"list`` command line tool output."
msgstr ""

#: ../../source/Tutorials/Intermediate/Composition.rst:194
msgid "Composition using launch actions"
msgstr ""

#: ../../source/Tutorials/Intermediate/Composition.rst:196
msgid ""
"While the command line tools are useful for debugging and diagnosing "
"component configurations, it is frequently more convenient to start a set"
" of components at the same time. To automate this action, we can use a "
"`launch file "
"<https://github.com/ros2/demos/blob/rolling/composition/launch/composition_demo_launch.py>`__:"
msgstr ""

#: ../../source/Tutorials/Intermediate/Composition.rst:205
msgid "Advanced Topics"
msgstr ""

#: ../../source/Tutorials/Intermediate/Composition.rst:207
msgid ""
"Now that we have seen the basic operation of components, we can discuss a"
" few more advanced topics."
msgstr ""

#: ../../source/Tutorials/Intermediate/Composition.rst:211
msgid "Unloading components"
msgstr ""

#: ../../source/Tutorials/Intermediate/Composition.rst:219
msgid "Verify that the container is running via ``ros2`` command line tools:"
msgstr ""

#: ../../source/Tutorials/Intermediate/Composition.rst:231
msgid "In the second shell load both the talker and listener as we have before:"
msgstr ""

#: ../../source/Tutorials/Intermediate/Composition.rst:238
msgid "Use the unique ID to unload the node from the component container."
msgstr ""

#: ../../source/Tutorials/Intermediate/Composition.rst:244
msgid "The terminal should return:"
msgstr ""

#: ../../source/Tutorials/Intermediate/Composition.rst:251
msgid ""
"In the first shell, verify that the repeated messages from talker and "
"listener have stopped."
msgstr ""

#: ../../source/Tutorials/Intermediate/Composition.rst:255
msgid "Remapping container name and namespace"
msgstr ""

#: ../../source/Tutorials/Intermediate/Composition.rst:257
msgid ""
"The component manager name and namespace can be remapped via standard "
"command line arguments:"
msgstr ""

#: ../../source/Tutorials/Intermediate/Composition.rst:263
msgid ""
"In a second shell, components can be loaded by using the updated "
"container name:"
msgstr ""

#: ../../source/Tutorials/Intermediate/Composition.rst:271
#: ../../source/Tutorials/Intermediate/Composition.rst:323
msgid "Namespace remappings of the container do not affect loaded components."
msgstr ""

#: ../../source/Tutorials/Intermediate/Composition.rst:275
msgid "Remap component names and namespaces"
msgstr ""

#: ../../source/Tutorials/Intermediate/Composition.rst:277
msgid ""
"Component names and namespaces may be adjusted via arguments to the load "
"command."
msgstr ""

#: ../../source/Tutorials/Intermediate/Composition.rst:286
msgid "Some examples of how to remap names and namespaces."
msgstr ""

#: ../../source/Tutorials/Intermediate/Composition.rst:288
msgid "Remap node name:"
msgstr ""

#: ../../source/Tutorials/Intermediate/Composition.rst:294
msgid "Remap namespace:"
msgstr ""

#: ../../source/Tutorials/Intermediate/Composition.rst:300
msgid "Remap both:"
msgstr ""

#: ../../source/Tutorials/Intermediate/Composition.rst:306
msgid "Now use ``ros2`` command line utility:"
msgstr ""

#: ../../source/Tutorials/Intermediate/Composition.rst:312
msgid "In the console you should see corresponding entries:"
msgstr ""

#: ../../source/Tutorials/Intermediate/Composition.rst:326
msgid "Passing parameter values into components"
msgstr ""

#: ../../source/Tutorials/Intermediate/Composition.rst:328
msgid ""
"The ``ros2 component load`` command-line supports passing arbitrary "
"parameters to the node as it is constructed. This functionality can be "
"used as follows:"
msgstr ""

#: ../../source/Tutorials/Intermediate/Composition.rst:336
msgid "Passing additional arguments into components"
msgstr ""

#: ../../source/Tutorials/Intermediate/Composition.rst:338
msgid ""
"The ``ros2 component load`` command-line supports passing particular "
"options to the component manager for use when constructing the node. As "
"of now, the only command-line option that is supported is to instantiate "
"a node using intra-process communication. This functionality can be used "
"as follows:"
msgstr ""

#: ../../source/Tutorials/Intermediate/Composition.rst:347
msgid "Composable nodes as shared libraries"
msgstr ""

#: ../../source/Tutorials/Intermediate/Composition.rst:349
msgid ""
"If you want to export a composable node as a shared library from a "
"package and use that node in another package that does link-time "
"composition, add code to the CMake file which imports the actual targets "
"in downstream packages."
msgstr ""

#: ../../source/Tutorials/Intermediate/Composition.rst:351
msgid "Then install the generated file and export the generated file."
msgstr ""

#: ../../source/Tutorials/Intermediate/Composition.rst:353
msgid ""
"A practical example can be seen here: `ROS Discourse - Ament best "
"practice for sharing libraries <https://discourse.ros.org/t/ament-best-"
"practice-for-sharing-libraries/3602>`__"
msgstr ""

#: ../../source/Tutorials/Intermediate/Composition.rst:356
msgid "Composing Non-Node Derived Components"
msgstr ""

#: ../../source/Tutorials/Intermediate/Composition.rst:358
msgid ""
"In ROS 2, components allow for more efficient use of system resources and"
" provide a powerful feature that enables you to create reusable "
"functionality that is not tied to a specific node."
msgstr ""

#: ../../source/Tutorials/Intermediate/Composition.rst:360
msgid ""
"One advantage of using components is that they allow you to create non-"
"node derived functionality as standalone executables or shared libraries "
"that can be loaded into the ROS system as needed."
msgstr ""

#: ../../source/Tutorials/Intermediate/Composition.rst:362
msgid ""
"To create a component that is not derived from a node, follow these "
"guidelines:"
msgstr ""

#: ../../source/Tutorials/Intermediate/Composition.rst:364
msgid ""
"Implement a constructor that takes ``const rclcpp::NodeOptions&`` as its "
"argument."
msgstr ""

#: ../../source/Tutorials/Intermediate/Composition.rst:365
msgid ""
"Implement the ``get_node_base_interface()`` method, which should return a"
" ``NodeBaseInterface::SharedPtr``. You can use the "
"``get_node_base_interface()`` method of a node that you create in your "
"constructor to provide this interface."
msgstr ""

#: ../../source/Tutorials/Intermediate/Composition.rst:367
msgid ""
"Here's an example of a component that is not derived from a node, which "
"listens to a ROS topic: `node_like_listener_component "
"<https://github.com/ros2/demos/blob/rolling/composition/src/node_like_listener_component.cpp>`__."
msgstr ""

#: ../../source/Tutorials/Intermediate/Composition.rst:369
msgid ""
"For more information on this topic, you can refer to this `discussion "
"<https://github.com/ros2/rclcpp/issues/2110#issuecomment-1454228192>`__."
msgstr ""

