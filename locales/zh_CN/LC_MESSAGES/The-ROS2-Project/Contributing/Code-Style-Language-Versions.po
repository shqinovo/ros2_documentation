# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2023, Open Robotics
# This file is distributed under the same license as the ROS 2 documentation
# package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2023.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: ROS 2 documentation \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2023-12-08 06:20+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language: zh_CN\n"
"Language-Team: zh_CN <LL@li.org>\n"
"Plural-Forms: nplurals=1; plural=0;\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.12.1\n"

#: ../../source/The-ROS2-Project/Contributing/Code-Style-Language-Versions.rst:8
msgid "Code style and language versions"
msgstr ""

#: ../../source/The-ROS2-Project/Contributing/Code-Style-Language-Versions.rst:12
msgid "Table of Contents"
msgstr ""

#: ../../source/The-ROS2-Project/Contributing/Code-Style-Language-Versions.rst:14
msgid ""
"In order to achieve a consistent looking product we will all follow "
"externally (if possible) defined style guidelines for each language. For "
"other things like package layout or documentation layout we will need to "
"come up with our own guidelines, drawing on current, popular styles in "
"use now."
msgstr ""

#: ../../source/The-ROS2-Project/Contributing/Code-Style-Language-Versions.rst:17
msgid ""
"Additionally, wherever possible, developers should use integrated tools "
"to allow them to check that these guidelines are followed in their "
"editors. For example, everyone should have a PEP8 checker built into "
"their editor to cut down on review iterations related to style."
msgstr ""

#: ../../source/The-ROS2-Project/Contributing/Code-Style-Language-Versions.rst:20
msgid ""
"Also where possible, packages should check style as part of their unit "
"tests to help with the automated detection of style issues (see "
"`ament_lint_auto "
"<https://github.com/ament/ament_lint/blob/rolling/ament_lint_auto/doc/index.rst>`__)."
msgstr ""

#: ../../source/The-ROS2-Project/Contributing/Code-Style-Language-Versions.rst:23
msgid "C"
msgstr ""

#: ../../source/The-ROS2-Project/Contributing/Code-Style-Language-Versions.rst:26
#: ../../source/The-ROS2-Project/Contributing/Code-Style-Language-Versions.rst:60
msgid "Standard"
msgstr ""

#: ../../source/The-ROS2-Project/Contributing/Code-Style-Language-Versions.rst:28
msgid "We will target C99."
msgstr ""

#: ../../source/The-ROS2-Project/Contributing/Code-Style-Language-Versions.rst:31
#: ../../source/The-ROS2-Project/Contributing/Code-Style-Language-Versions.rst:65
#: ../../source/The-ROS2-Project/Contributing/Code-Style-Language-Versions.rst:329
#: ../../source/The-ROS2-Project/Contributing/Code-Style-Language-Versions.rst:359
#: ../../source/The-ROS2-Project/Contributing/Code-Style-Language-Versions.rst:376
msgid "Style"
msgstr ""

#: ../../source/The-ROS2-Project/Contributing/Code-Style-Language-Versions.rst:33
msgid ""
"We will use `Python's PEP7 <https://www.python.org/dev/peps/pep-0007/>`__"
" for our C style guide, with some modifications and additions:"
msgstr ""

#: ../../source/The-ROS2-Project/Contributing/Code-Style-Language-Versions.rst:35
msgid "We will target C99, as we do not need to support C89 (as PEP7 recommends)"
msgstr ""

#: ../../source/The-ROS2-Project/Contributing/Code-Style-Language-Versions.rst:37
msgid ""
"rationale: among other things it allows us to use both ``//`` and ``/* "
"*/`` style comments"
msgstr ""

#: ../../source/The-ROS2-Project/Contributing/Code-Style-Language-Versions.rst:38
msgid "rationale: C99 is pretty much ubiquitous now"
msgstr ""

#: ../../source/The-ROS2-Project/Contributing/Code-Style-Language-Versions.rst:40
msgid "C++ style ``//`` comments are allowed"
msgstr ""

#: ../../source/The-ROS2-Project/Contributing/Code-Style-Language-Versions.rst:41
msgid ""
"(optional) Always place literals on the left-hand side of comparison "
"operators, e.g. ``0 == ret`` instead of ``ret == 0``"
msgstr ""

#: ../../source/The-ROS2-Project/Contributing/Code-Style-Language-Versions.rst:43
msgid "rationale: ``ret == 0`` too easily turns into ``ret = 0`` by accident"
msgstr ""

#: ../../source/The-ROS2-Project/Contributing/Code-Style-Language-Versions.rst:44
msgid ""
"optional because when using ``-Wall`` (or equivalent) modern compilers "
"will warn you when this happens"
msgstr ""

#: ../../source/The-ROS2-Project/Contributing/Code-Style-Language-Versions.rst:46
msgid ""
"All of the following modifications only apply if we are not writing "
"Python modules:"
msgstr ""

#: ../../source/The-ROS2-Project/Contributing/Code-Style-Language-Versions.rst:48
msgid "Do not use ``Py_`` as a prefix for everything"
msgstr ""

#: ../../source/The-ROS2-Project/Contributing/Code-Style-Language-Versions.rst:50
msgid ""
"instead use a CamelCase version of the package name or other appropriate "
"prefix"
msgstr ""

#: ../../source/The-ROS2-Project/Contributing/Code-Style-Language-Versions.rst:52
msgid "The stuff about documentation strings doesn't apply"
msgstr ""

#: ../../source/The-ROS2-Project/Contributing/Code-Style-Language-Versions.rst:54
msgid ""
"We can use the `pep7 <https://github.com/mike-perdide/pep7>`__ python "
"module for style checking. The editor integration seems slim, we may need"
" to look into automated checking for C in more detail."
msgstr ""

#: ../../source/The-ROS2-Project/Contributing/Code-Style-Language-Versions.rst:57
msgid "C++"
msgstr ""

#: ../../source/The-ROS2-Project/Contributing/Code-Style-Language-Versions.rst:62
msgid "Rolling targets C++17."
msgstr ""

#: ../../source/The-ROS2-Project/Contributing/Code-Style-Language-Versions.rst:68
msgid ""
"We will use the `Google C++ Style Guide "
"<https://google.github.io/styleguide/cppguide.html>`__, with some "
"modifications:"
msgstr ""

#: ../../source/The-ROS2-Project/Contributing/Code-Style-Language-Versions.rst:71
msgid "Line Length"
msgstr ""

#: ../../source/The-ROS2-Project/Contributing/Code-Style-Language-Versions.rst:73
msgid "Our maximum line length is 100 characters."
msgstr ""

#: ../../source/The-ROS2-Project/Contributing/Code-Style-Language-Versions.rst:76
msgid "File Extensions"
msgstr ""

#: ../../source/The-ROS2-Project/Contributing/Code-Style-Language-Versions.rst:78
msgid "Header files should use the .hpp extension."
msgstr ""

#: ../../source/The-ROS2-Project/Contributing/Code-Style-Language-Versions.rst:80
#: ../../source/The-ROS2-Project/Contributing/Code-Style-Language-Versions.rst:84
msgid "rationale: Allow tools to determine content of files, C++ or C."
msgstr ""

#: ../../source/The-ROS2-Project/Contributing/Code-Style-Language-Versions.rst:82
msgid "Implementation files should use the .cpp extension."
msgstr ""

#: ../../source/The-ROS2-Project/Contributing/Code-Style-Language-Versions.rst:87
msgid "Variable Naming"
msgstr ""

#: ../../source/The-ROS2-Project/Contributing/Code-Style-Language-Versions.rst:89
msgid "For global variables use lowercase with underscores prefixed with ``g_``"
msgstr ""

#: ../../source/The-ROS2-Project/Contributing/Code-Style-Language-Versions.rst:91
msgid "rationale: keep variable naming case consistent across the project"
msgstr ""

#: ../../source/The-ROS2-Project/Contributing/Code-Style-Language-Versions.rst:92
msgid "rationale: easy to tell the scope of a variable at a glance"
msgstr ""

#: ../../source/The-ROS2-Project/Contributing/Code-Style-Language-Versions.rst:93
msgid "consistency across languages"
msgstr ""

#: ../../source/The-ROS2-Project/Contributing/Code-Style-Language-Versions.rst:96
msgid "Function and Method Naming"
msgstr ""

#: ../../source/The-ROS2-Project/Contributing/Code-Style-Language-Versions.rst:98
msgid ""
"Google style guide says ``CamelCase``, but the C++ std library's style of"
" ``snake_case`` is also allowed"
msgstr ""

#: ../../source/The-ROS2-Project/Contributing/Code-Style-Language-Versions.rst:100
msgid "rationale: ROS 2 core packages currently use ``snake_case``"
msgstr ""

#: ../../source/The-ROS2-Project/Contributing/Code-Style-Language-Versions.rst:102
msgid ""
"reason: either an historical oversight or a personal preference that "
"didn't get checked by the linter"
msgstr ""

#: ../../source/The-ROS2-Project/Contributing/Code-Style-Language-Versions.rst:103
msgid "reason for not changing: retroactively changing would be too disruptive"
msgstr ""

#: ../../source/The-ROS2-Project/Contributing/Code-Style-Language-Versions.rst:104
msgid "other considerations:"
msgstr ""

#: ../../source/The-ROS2-Project/Contributing/Code-Style-Language-Versions.rst:106
msgid ""
"``cpplint.py`` does not check this case (hard to enforce other than with "
"review)"
msgstr ""

#: ../../source/The-ROS2-Project/Contributing/Code-Style-Language-Versions.rst:107
msgid "``snake_case`` can result in more consistency across languages"
msgstr ""

#: ../../source/The-ROS2-Project/Contributing/Code-Style-Language-Versions.rst:108
msgid "specific guidance:"
msgstr ""

#: ../../source/The-ROS2-Project/Contributing/Code-Style-Language-Versions.rst:110
msgid "for existing projects, prefer the existing style"
msgstr ""

#: ../../source/The-ROS2-Project/Contributing/Code-Style-Language-Versions.rst:111
msgid ""
"for new projects, either is acceptable, but a preference for matching "
"related existing projects is advised"
msgstr ""

#: ../../source/The-ROS2-Project/Contributing/Code-Style-Language-Versions.rst:112
msgid "final decision is always developer discretion"
msgstr ""

#: ../../source/The-ROS2-Project/Contributing/Code-Style-Language-Versions.rst:114
msgid ""
"special cases like function pointers, callable types, etc. may require "
"bending the rules"
msgstr ""

#: ../../source/The-ROS2-Project/Contributing/Code-Style-Language-Versions.rst:115
msgid "Note that classes should still use ``CamelCase`` by default"
msgstr ""

#: ../../source/The-ROS2-Project/Contributing/Code-Style-Language-Versions.rst:118
msgid "Access Control"
msgstr ""

#: ../../source/The-ROS2-Project/Contributing/Code-Style-Language-Versions.rst:120
msgid ""
"Drop requirement for all class members to be private and therefore "
"require accessors"
msgstr ""

#: ../../source/The-ROS2-Project/Contributing/Code-Style-Language-Versions.rst:122
msgid "rationale: this is overly constraining for user API design"
msgstr ""

#: ../../source/The-ROS2-Project/Contributing/Code-Style-Language-Versions.rst:123
msgid ""
"we should prefer private members, only making them public when they are "
"needed"
msgstr ""

#: ../../source/The-ROS2-Project/Contributing/Code-Style-Language-Versions.rst:124
msgid ""
"we should consider using accessors before choosing to allow direct member"
" access"
msgstr ""

#: ../../source/The-ROS2-Project/Contributing/Code-Style-Language-Versions.rst:125
msgid ""
"we should have a good reason for allowing direct member access, other "
"than because it is convenient for us"
msgstr ""

#: ../../source/The-ROS2-Project/Contributing/Code-Style-Language-Versions.rst:128
msgid "Exceptions"
msgstr ""

#: ../../source/The-ROS2-Project/Contributing/Code-Style-Language-Versions.rst:130
msgid "Exceptions are allowed"
msgstr ""

#: ../../source/The-ROS2-Project/Contributing/Code-Style-Language-Versions.rst:132
msgid ""
"rationale: this is a new codebase, so the legacy argument doesn't apply "
"to us"
msgstr ""

#: ../../source/The-ROS2-Project/Contributing/Code-Style-Language-Versions.rst:133
msgid ""
"rationale: for user-facing API's it is more idiomatic C++ to have "
"exceptions"
msgstr ""

#: ../../source/The-ROS2-Project/Contributing/Code-Style-Language-Versions.rst:134
msgid "Exceptions in destructors should be explicitly avoided"
msgstr ""

#: ../../source/The-ROS2-Project/Contributing/Code-Style-Language-Versions.rst:136
msgid ""
"We should consider avoiding Exceptions if we intend to wrap the resulting"
" API in C"
msgstr ""

#: ../../source/The-ROS2-Project/Contributing/Code-Style-Language-Versions.rst:138
msgid "rationale: it will make it easier to wrap in C"
msgstr ""

#: ../../source/The-ROS2-Project/Contributing/Code-Style-Language-Versions.rst:139
msgid ""
"rationale: most of our dependencies in code we intend to wrap in C do not"
" use exceptions anyways"
msgstr ""

#: ../../source/The-ROS2-Project/Contributing/Code-Style-Language-Versions.rst:142
msgid "Function-like Objects"
msgstr ""

#: ../../source/The-ROS2-Project/Contributing/Code-Style-Language-Versions.rst:144
msgid "No restrictions on Lambda's or ``std::function`` or ``std::bind``"
msgstr ""

#: ../../source/The-ROS2-Project/Contributing/Code-Style-Language-Versions.rst:147
msgid "Boost"
msgstr ""

#: ../../source/The-ROS2-Project/Contributing/Code-Style-Language-Versions.rst:149
msgid "Boost should be avoided unless absolutely required."
msgstr ""

#: ../../source/The-ROS2-Project/Contributing/Code-Style-Language-Versions.rst:152
msgid "Comments and Doc Comments"
msgstr ""

#: ../../source/The-ROS2-Project/Contributing/Code-Style-Language-Versions.rst:154
msgid ""
"Use ``///`` and ``/** */`` comments for *documentation* purposes and "
"``//`` style comments for notes and general comments"
msgstr ""

#: ../../source/The-ROS2-Project/Contributing/Code-Style-Language-Versions.rst:156
msgid ""
"Class and Function comments should use ``///`` and ``/** */`` style "
"comments"
msgstr ""

#: ../../source/The-ROS2-Project/Contributing/Code-Style-Language-Versions.rst:157
msgid "rationale: these are recommended for Doxygen and Sphinx in C/C++"
msgstr ""

#: ../../source/The-ROS2-Project/Contributing/Code-Style-Language-Versions.rst:158
msgid ""
"rationale: mixing ``/* */`` and ``//`` is convenient for block commenting"
" out code which contains comments"
msgstr ""

#: ../../source/The-ROS2-Project/Contributing/Code-Style-Language-Versions.rst:159
msgid ""
"Descriptions of how the code works or notes within classes and functions "
"should use ``//`` style comments"
msgstr ""

#: ../../source/The-ROS2-Project/Contributing/Code-Style-Language-Versions.rst:162
msgid "Pointer Syntax Alignment"
msgstr ""

#: ../../source/The-ROS2-Project/Contributing/Code-Style-Language-Versions.rst:164
msgid ""
"Use ``char * c;`` instead of ``char* c;`` or ``char *c;`` because of this"
" scenario ``char* c, *d, *e;``"
msgstr ""

#: ../../source/The-ROS2-Project/Contributing/Code-Style-Language-Versions.rst:167
msgid "Class Privacy Keywords"
msgstr ""

#: ../../source/The-ROS2-Project/Contributing/Code-Style-Language-Versions.rst:169
msgid ""
"Do not put 1 space before ``public:``, ``private:``, or ``protected:``, "
"it is more consistent for all indentions to be a multiple of 2"
msgstr ""

#: ../../source/The-ROS2-Project/Contributing/Code-Style-Language-Versions.rst:171
msgid ""
"rationale: most editors don't like indentions which are not a multiple of"
" the (soft) tab size"
msgstr ""

#: ../../source/The-ROS2-Project/Contributing/Code-Style-Language-Versions.rst:172
msgid ""
"Use zero spaces before ``public:``, ``private:``, or ``protected:``, or 2"
" spaces"
msgstr ""

#: ../../source/The-ROS2-Project/Contributing/Code-Style-Language-Versions.rst:173
msgid ""
"If you use 2 spaces before, indent other class statements by 2 additional"
" spaces"
msgstr ""

#: ../../source/The-ROS2-Project/Contributing/Code-Style-Language-Versions.rst:174
msgid ""
"Prefer zero spaces, i.e. ``public:``, ``private:``, or ``protected:`` in "
"the same column as the class"
msgstr ""

#: ../../source/The-ROS2-Project/Contributing/Code-Style-Language-Versions.rst:177
msgid "Nested Templates"
msgstr ""

#: ../../source/The-ROS2-Project/Contributing/Code-Style-Language-Versions.rst:179
msgid "Never add whitespace to nested templates"
msgstr ""

#: ../../source/The-ROS2-Project/Contributing/Code-Style-Language-Versions.rst:181
msgid ""
"Prefer ``set<list<string>>`` (C++11 feature) to ``set<list<string> >`` or"
" ``set< list<string> >``"
msgstr ""

#: ../../source/The-ROS2-Project/Contributing/Code-Style-Language-Versions.rst:184
msgid "Always Use Braces"
msgstr ""

#: ../../source/The-ROS2-Project/Contributing/Code-Style-Language-Versions.rst:186
msgid ""
"Always use braces following ``if``, ``else``, ``do``, ``while``, and "
"``for``, even when the body is a single line."
msgstr ""

#: ../../source/The-ROS2-Project/Contributing/Code-Style-Language-Versions.rst:188
msgid ""
"rationale: less opportunity for visual ambiguity and for complications "
"due to use of macros in the body"
msgstr ""

#: ../../source/The-ROS2-Project/Contributing/Code-Style-Language-Versions.rst:191
msgid "Open Versus Cuddled Braces"
msgstr ""

#: ../../source/The-ROS2-Project/Contributing/Code-Style-Language-Versions.rst:193
msgid ""
"Use open braces for ``function``, ``class``, ``enum``, and ``struct`` "
"definitions, but cuddle braces on ``if``, ``else``, ``while``, ``for``, "
"etc..."
msgstr ""

#: ../../source/The-ROS2-Project/Contributing/Code-Style-Language-Versions.rst:195
msgid ""
"Exception: when an ``if`` (or ``while``, etc.) condition is long enough "
"to require line-wrapping, then use an open brace (i.e., don't cuddle)."
msgstr ""

#: ../../source/The-ROS2-Project/Contributing/Code-Style-Language-Versions.rst:197
msgid ""
"When a function call cannot fit on one line, wrap at the open parenthesis"
" (not in between arguments) and start them on the next line with a "
"2-space indent.  Continue with the 2-space indent on subsequent lines for"
" more arguments.  (Note that the `Google style guide "
"<https://google.github.io/styleguide/cppguide.html#Function_Calls>`__ is "
"internally contradictory on this point.)"
msgstr ""

#: ../../source/The-ROS2-Project/Contributing/Code-Style-Language-Versions.rst:199
msgid ""
"Same goes for ``if`` (and ``while``, etc.) conditions that are too long "
"to fit on one line."
msgstr ""

#: ../../source/The-ROS2-Project/Contributing/Code-Style-Language-Versions.rst:202
msgid "Examples"
msgstr ""

#: ../../source/The-ROS2-Project/Contributing/Code-Style-Language-Versions.rst:204
#: ../../source/The-ROS2-Project/Contributing/Code-Style-Language-Versions.rst:259
msgid "This is OK:"
msgstr ""

#: ../../source/The-ROS2-Project/Contributing/Code-Style-Language-Versions.rst:242
msgid "This is **not** OK:"
msgstr ""

#: ../../source/The-ROS2-Project/Contributing/Code-Style-Language-Versions.rst:257
msgid ""
"Use open braces rather than excessive indention, e.g. for distinguishing "
"constructor code from constructor initializer lists"
msgstr ""

#: ../../source/The-ROS2-Project/Contributing/Code-Style-Language-Versions.rst:281
msgid "This is **not** OK, even weird (the google way?):"
msgstr ""

#: ../../source/The-ROS2-Project/Contributing/Code-Style-Language-Versions.rst:302
msgid "Linters"
msgstr ""

#: ../../source/The-ROS2-Project/Contributing/Code-Style-Language-Versions.rst:304
msgid ""
"We check these styles with a combination of Google's `cpplint.py "
"<https://github.com/google/styleguide>`__ and `uncrustify "
"<https://github.com/uncrustify/uncrustify>`__."
msgstr ""

#: ../../source/The-ROS2-Project/Contributing/Code-Style-Language-Versions.rst:306
msgid "We provide command line tools with custom configurations:"
msgstr ""

#: ../../source/The-ROS2-Project/Contributing/Code-Style-Language-Versions.rst:308
msgid ""
"`ament_clang_format "
"<https://github.com/ament/ament_lint/blob/rolling/ament_clang_format/doc/index.rst>`__:"
" `configuration "
"<https://github.com/ament/ament_lint/blob/rolling/ament_clang_format/ament_clang_format/configuration"
"/.clang-format>`__"
msgstr ""

#: ../../source/The-ROS2-Project/Contributing/Code-Style-Language-Versions.rst:309
msgid ""
"`ament_cpplint "
"<https://github.com/ament/ament_lint/blob/rolling/ament_cpplint/doc/index.rst>`__"
msgstr ""

#: ../../source/The-ROS2-Project/Contributing/Code-Style-Language-Versions.rst:310
msgid ""
"`ament_uncrustify "
"<https://github.com/ament/ament_lint/blob/rolling/ament_uncrustify/doc/index.rst>`__:"
" `configuration "
"<https://github.com/ament/ament_lint/blob/rolling/ament_uncrustify/ament_uncrustify/configuration/ament_code_style.cfg>`__"
msgstr ""

#: ../../source/The-ROS2-Project/Contributing/Code-Style-Language-Versions.rst:312
msgid ""
"Some formatters such as ament_uncrustify and ament_clang_format support "
"``--reformat`` options to apply changes in place."
msgstr ""

#: ../../source/The-ROS2-Project/Contributing/Code-Style-Language-Versions.rst:314
msgid ""
"We also run other tools to detect and eliminate as many warnings as "
"possible. Here's a non-exhaustive list of additional things we try to do "
"on all of our packages:"
msgstr ""

#: ../../source/The-ROS2-Project/Contributing/Code-Style-Language-Versions.rst:317
msgid "use compiler flags like ``-Wall -Wextra -Wpedantic``"
msgstr ""

#: ../../source/The-ROS2-Project/Contributing/Code-Style-Language-Versions.rst:318
msgid ""
"run static code analysis like ``cppcheck``, which we have integrated in "
"`ament_cppcheck "
"<https://github.com/ament/ament_lint/blob/rolling/ament_cppcheck/doc/index.rst>`__."
msgstr ""

#: ../../source/The-ROS2-Project/Contributing/Code-Style-Language-Versions.rst:321
msgid "Python"
msgstr ""

#: ../../source/The-ROS2-Project/Contributing/Code-Style-Language-Versions.rst:324
#: ../../source/The-ROS2-Project/Contributing/Code-Style-Language-Versions.rst:354
msgid "Version"
msgstr ""

#: ../../source/The-ROS2-Project/Contributing/Code-Style-Language-Versions.rst:326
msgid "We will target Python 3 for our development."
msgstr ""

#: ../../source/The-ROS2-Project/Contributing/Code-Style-Language-Versions.rst:331
msgid ""
"We will use the `PEP8 guidelines "
"<https://www.python.org/dev/peps/pep-0008/>`_ for code format."
msgstr ""

#: ../../source/The-ROS2-Project/Contributing/Code-Style-Language-Versions.rst:333
msgid "We chose the following more precise rule where PEP 8 leaves some freedom:"
msgstr ""

#: ../../source/The-ROS2-Project/Contributing/Code-Style-Language-Versions.rst:335
msgid ""
"`We allow up to 100 characters per line (fifth paragraph) "
"<https://www.python.org/dev/peps/pep-0008/#maximum-line-length>`_."
msgstr ""

#: ../../source/The-ROS2-Project/Contributing/Code-Style-Language-Versions.rst:336
msgid ""
"`We pick single quotes over double quotes as long as no escaping is "
"necessary <https://www.python.org/dev/peps/pep-0008/#string-quotes>`_."
msgstr ""

#: ../../source/The-ROS2-Project/Contributing/Code-Style-Language-Versions.rst:337
msgid ""
"`We prefer hanging indents for continuation lines "
"<https://www.python.org/dev/peps/pep-0008/#indentation>`_."
msgstr ""

#: ../../source/The-ROS2-Project/Contributing/Code-Style-Language-Versions.rst:339
msgid ""
"Tools like the ``(ament_)pycodestyle`` Python package should be used in "
"unit-test and/or editor integration for checking Python code style."
msgstr ""

#: ../../source/The-ROS2-Project/Contributing/Code-Style-Language-Versions.rst:341
msgid ""
"The pycodestyle configuration used in the linter is `here "
"<https://github.com/ament/ament_lint/blob/rolling/ament_pycodestyle/ament_pycodestyle/configuration/ament_pycodestyle.ini>`__."
msgstr ""

#: ../../source/The-ROS2-Project/Contributing/Code-Style-Language-Versions.rst:343
msgid "Integration with editors:"
msgstr ""

#: ../../source/The-ROS2-Project/Contributing/Code-Style-Language-Versions.rst:345
msgid "atom: https://atom.io/packages/linter-pycodestyle"
msgstr ""

#: ../../source/The-ROS2-Project/Contributing/Code-Style-Language-Versions.rst:346
msgid "emacs: https://www.emacswiki.org/emacs/PythonProgrammingInEmacs"
msgstr ""

#: ../../source/The-ROS2-Project/Contributing/Code-Style-Language-Versions.rst:347
msgid "Sublime Text: https://sublime.wbond.net/packages/SublimeLinter-flake8"
msgstr ""

#: ../../source/The-ROS2-Project/Contributing/Code-Style-Language-Versions.rst:348
msgid "vim: https://github.com/nvie/vim-flake8"
msgstr ""

#: ../../source/The-ROS2-Project/Contributing/Code-Style-Language-Versions.rst:351
msgid "CMake"
msgstr ""

#: ../../source/The-ROS2-Project/Contributing/Code-Style-Language-Versions.rst:356
msgid "We will target CMake 3.8."
msgstr ""

#: ../../source/The-ROS2-Project/Contributing/Code-Style-Language-Versions.rst:361
msgid "Since there is not an existing CMake style guide we will define our own:"
msgstr ""

#: ../../source/The-ROS2-Project/Contributing/Code-Style-Language-Versions.rst:363
msgid "Use lowercase command names (``find_package``, not ``FIND_PACKAGE``)."
msgstr ""

#: ../../source/The-ROS2-Project/Contributing/Code-Style-Language-Versions.rst:364
msgid "Use ``snake_case`` identifiers (variables, functions, macros)."
msgstr ""

#: ../../source/The-ROS2-Project/Contributing/Code-Style-Language-Versions.rst:365
msgid "Use empty ``else()`` and ``end...()`` commands."
msgstr ""

#: ../../source/The-ROS2-Project/Contributing/Code-Style-Language-Versions.rst:366
msgid "No whitespace before ``(``\\ 's."
msgstr ""

#: ../../source/The-ROS2-Project/Contributing/Code-Style-Language-Versions.rst:367
msgid "Use two spaces of indention, do not use tabs."
msgstr ""

#: ../../source/The-ROS2-Project/Contributing/Code-Style-Language-Versions.rst:368
msgid ""
"Do not use aligned indentation for parameters of multi-line macro "
"invocations. Use two spaces only."
msgstr ""

#: ../../source/The-ROS2-Project/Contributing/Code-Style-Language-Versions.rst:369
msgid "Prefer functions with ``set(PARENT_SCOPE)`` to macros."
msgstr ""

#: ../../source/The-ROS2-Project/Contributing/Code-Style-Language-Versions.rst:370
msgid ""
"When using macros prefix local variables with ``_`` or a reasonable "
"prefix."
msgstr ""

#: ../../source/The-ROS2-Project/Contributing/Code-Style-Language-Versions.rst:373
msgid "Markdown / reStructured Text / docblocks"
msgstr ""

#: ../../source/The-ROS2-Project/Contributing/Code-Style-Language-Versions.rst:378
msgid ""
"The following rules to format text is intended to increase readability as"
" well as versioning."
msgstr ""

#: ../../source/The-ROS2-Project/Contributing/Code-Style-Language-Versions.rst:380
msgid ""
"*[.md, .rst only]* Each section title should be preceded by one empty "
"line and succeeded by one empty line."
msgstr ""

#: ../../source/The-ROS2-Project/Contributing/Code-Style-Language-Versions.rst:382
msgid ""
"Rationale: It expedites to get an overview about the structure when "
"screening the document."
msgstr ""

#: ../../source/The-ROS2-Project/Contributing/Code-Style-Language-Versions.rst:384
msgid ""
"*[.rst only]* In reStructured Text the headings should follow the "
"hierarchy described in the `Sphinx style guide <https://documentation-"
"style-guide-sphinx.readthedocs.io/en/latest/style-"
"guide.html#headings>`__:"
msgstr ""

#: ../../source/The-ROS2-Project/Contributing/Code-Style-Language-Versions.rst:386
msgid "``#`` with overline (only once, used for the document title)"
msgstr ""

#: ../../source/The-ROS2-Project/Contributing/Code-Style-Language-Versions.rst:387
msgid "``*`` with overline"
msgstr ""

#: ../../source/The-ROS2-Project/Contributing/Code-Style-Language-Versions.rst:388
msgid "``=``"
msgstr ""

#: ../../source/The-ROS2-Project/Contributing/Code-Style-Language-Versions.rst:389
msgid "``-``"
msgstr ""

#: ../../source/The-ROS2-Project/Contributing/Code-Style-Language-Versions.rst:390
msgid "``^``"
msgstr ""

#: ../../source/The-ROS2-Project/Contributing/Code-Style-Language-Versions.rst:391
msgid "``\"``"
msgstr ""

#: ../../source/The-ROS2-Project/Contributing/Code-Style-Language-Versions.rst:392
msgid ""
"Rationale: A consistent hierarchy expedites getting an idea about the "
"nesting level when screening the document."
msgstr ""

#: ../../source/The-ROS2-Project/Contributing/Code-Style-Language-Versions.rst:394
msgid ""
"*[.md only]* In Markdown the headings should follow the ATX-style "
"described in the `Markdown syntax documentation "
"<https://daringfireball.net/projects/markdown/syntax#header>`__"
msgstr ""

#: ../../source/The-ROS2-Project/Contributing/Code-Style-Language-Versions.rst:396
msgid ""
"ATX-style headers use 1-6 hash characters (``#``) at the start of the "
"line to denote header levels 1-6."
msgstr ""

#: ../../source/The-ROS2-Project/Contributing/Code-Style-Language-Versions.rst:397
msgid ""
"A space between the hashes and the header title should be used (such as "
"``# Heading 1``) to make it easier to visually separate them."
msgstr ""

#: ../../source/The-ROS2-Project/Contributing/Code-Style-Language-Versions.rst:398
msgid ""
"Justification for the ATX-style preference comes from the `Google "
"Markdown style guide <https://github.com/google/styleguide/blob/gh-"
"pages/docguide/style.md#atx-style-headings>`__"
msgstr ""

#: ../../source/The-ROS2-Project/Contributing/Code-Style-Language-Versions.rst:399
msgid ""
"Rationale: ATX-style headers are easier to search and maintain, and make "
"the first two header levels consistent with the other levels."
msgstr ""

#: ../../source/The-ROS2-Project/Contributing/Code-Style-Language-Versions.rst:401
msgid "*[any]* Each sentence must start on a new line."
msgstr ""

#: ../../source/The-ROS2-Project/Contributing/Code-Style-Language-Versions.rst:403
msgid ""
"Rationale: For longer paragraphs a single change in the beginning makes "
"the diff unreadable since it carries forward through the whole paragraph."
msgstr ""

#: ../../source/The-ROS2-Project/Contributing/Code-Style-Language-Versions.rst:405
msgid "*[any]* Each sentence can optionally be wrapped to keep each line short."
msgstr ""

#: ../../source/The-ROS2-Project/Contributing/Code-Style-Language-Versions.rst:406
msgid "*[any]* The lines should not have any trailing white spaces."
msgstr ""

#: ../../source/The-ROS2-Project/Contributing/Code-Style-Language-Versions.rst:407
msgid ""
"*[.md, .rst only]* A code block must be preceded and succeeded by an "
"empty line."
msgstr ""

#: ../../source/The-ROS2-Project/Contributing/Code-Style-Language-Versions.rst:409
msgid ""
"Rationale: Whitespace is significant only directly before and directly "
"after fenced code blocks. Following these instructions will ensure that "
"highlighting works properly and consistently."
msgstr ""

#: ../../source/The-ROS2-Project/Contributing/Code-Style-Language-Versions.rst:412
msgid "*[.md, .rst only]* A code block should specify a syntax (e.g. ``bash``)."
msgstr ""

