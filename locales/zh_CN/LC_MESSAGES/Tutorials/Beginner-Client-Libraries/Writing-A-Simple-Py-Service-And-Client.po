# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2023, Open Robotics
# This file is distributed under the same license as the ROS 2 documentation
# package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2023.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: ROS 2 documentation \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2023-12-08 06:20+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language: zh_CN\n"
"Language-Team: zh_CN <LL@li.org>\n"
"Plural-Forms: nplurals=1; plural=0;\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.12.1\n"

#: ../../source/Tutorials/Beginner-Client-Libraries/Writing-A-Simple-Py-Service-And-Client.rst:8
msgid "Writing a simple service and client (Python)"
msgstr ""

#: ../../source/Tutorials/Beginner-Client-Libraries/Writing-A-Simple-Py-Service-And-Client.rst:10
msgid "**Goal:** Create and run service and client nodes using Python."
msgstr ""

#: ../../source/Tutorials/Beginner-Client-Libraries/Writing-A-Simple-Py-Service-And-Client.rst:12
msgid "**Tutorial level:** Beginner"
msgstr ""

#: ../../source/Tutorials/Beginner-Client-Libraries/Writing-A-Simple-Py-Service-And-Client.rst:14
msgid "**Time:** 20 minutes"
msgstr ""

#: ../../source/Tutorials/Beginner-Client-Libraries/Writing-A-Simple-Py-Service-And-Client.rst:18
msgid "Contents"
msgstr ""

#: ../../source/Tutorials/Beginner-Client-Libraries/Writing-A-Simple-Py-Service-And-Client.rst:21
msgid "Background"
msgstr ""

#: ../../source/Tutorials/Beginner-Client-Libraries/Writing-A-Simple-Py-Service-And-Client.rst:23
msgid ""
"When :doc:`nodes <../Beginner-CLI-Tools/Understanding-ROS2-Nodes"
"/Understanding-ROS2-Nodes>` communicate using :doc:`services "
"<../Beginner-CLI-Tools/Understanding-ROS2-Services/Understanding-"
"ROS2-Services>`, the node that sends a request for data is called the "
"client node, and the one that responds to the request is the service "
"node. The structure of the request and response is determined by a "
"``.srv`` file."
msgstr ""

#: ../../source/Tutorials/Beginner-Client-Libraries/Writing-A-Simple-Py-Service-And-Client.rst:26
msgid ""
"The example used here is a simple integer addition system; one node "
"requests the sum of two integers, and the other responds with the result."
msgstr ""

#: ../../source/Tutorials/Beginner-Client-Libraries/Writing-A-Simple-Py-Service-And-Client.rst:29
msgid "Prerequisites"
msgstr ""

#: ../../source/Tutorials/Beginner-Client-Libraries/Writing-A-Simple-Py-Service-And-Client.rst:31
msgid ""
"In previous tutorials, you learned how to :doc:`create a workspace "
"<./Creating-A-Workspace/Creating-A-Workspace>` and :doc:`create a package"
" <./Creating-Your-First-ROS2-Package>`."
msgstr ""

#: ../../source/Tutorials/Beginner-Client-Libraries/Writing-A-Simple-Py-Service-And-Client.rst:34
msgid "Tasks"
msgstr ""

#: ../../source/Tutorials/Beginner-Client-Libraries/Writing-A-Simple-Py-Service-And-Client.rst:37
msgid "1 Create a package"
msgstr ""

#: ../../source/Tutorials/Beginner-Client-Libraries/Writing-A-Simple-Py-Service-And-Client.rst:39
msgid ""
"Open a new terminal and :doc:`source your ROS 2 installation "
"<../Beginner-CLI-Tools/Configuring-ROS2-Environment>` so that ``ros2`` "
"commands will work."
msgstr ""

#: ../../source/Tutorials/Beginner-Client-Libraries/Writing-A-Simple-Py-Service-And-Client.rst:41
msgid ""
"Navigate into the ``ros2_ws`` directory created in a :ref:`previous "
"tutorial <new-directory>`."
msgstr ""

#: ../../source/Tutorials/Beginner-Client-Libraries/Writing-A-Simple-Py-Service-And-Client.rst:43
msgid ""
"Recall that packages should be created in the ``src`` directory, not the "
"root of the workspace. Navigate into ``ros2_ws/src`` and create a new "
"package:"
msgstr ""

#: ../../source/Tutorials/Beginner-Client-Libraries/Writing-A-Simple-Py-Service-And-Client.rst:50
msgid ""
"Your terminal will return a message verifying the creation of your "
"package ``py_srvcli`` and all its necessary files and folders."
msgstr ""

#: ../../source/Tutorials/Beginner-Client-Libraries/Writing-A-Simple-Py-Service-And-Client.rst:52
msgid ""
"The ``--dependencies`` argument will automatically add the necessary "
"dependency lines to ``package.xml``. ``example_interfaces`` is the "
"package that includes `the .srv file "
"<https://github.com/ros2/example_interfaces/blob/rolling/srv/AddTwoInts.srv>`__"
" you will need to structure your requests and responses:"
msgstr ""

#: ../../source/Tutorials/Beginner-Client-Libraries/Writing-A-Simple-Py-Service-And-Client.rst:62
msgid ""
"The first two lines are the parameters of the request, and below the "
"dashes is the response."
msgstr ""

#: ../../source/Tutorials/Beginner-Client-Libraries/Writing-A-Simple-Py-Service-And-Client.rst:65
msgid "1.1 Update ``package.xml``"
msgstr ""

#: ../../source/Tutorials/Beginner-Client-Libraries/Writing-A-Simple-Py-Service-And-Client.rst:67
msgid ""
"Because you used the ``--dependencies`` option during package creation, "
"you don't have to manually add dependencies to ``package.xml``."
msgstr ""

#: ../../source/Tutorials/Beginner-Client-Libraries/Writing-A-Simple-Py-Service-And-Client.rst:69
msgid ""
"As always, though, make sure to add the description, maintainer email and"
" name, and license information to ``package.xml``."
msgstr ""

#: ../../source/Tutorials/Beginner-Client-Libraries/Writing-A-Simple-Py-Service-And-Client.rst:78
msgid "1.2 Update ``setup.py``"
msgstr ""

#: ../../source/Tutorials/Beginner-Client-Libraries/Writing-A-Simple-Py-Service-And-Client.rst:80
msgid ""
"Add the same information to the ``setup.py`` file for the ``maintainer``,"
" ``maintainer_email``, ``description`` and ``license`` fields:"
msgstr ""

#: ../../source/Tutorials/Beginner-Client-Libraries/Writing-A-Simple-Py-Service-And-Client.rst:90
msgid "2 Write the service node"
msgstr ""

#: ../../source/Tutorials/Beginner-Client-Libraries/Writing-A-Simple-Py-Service-And-Client.rst:92
msgid ""
"Inside the ``ros2_ws/src/py_srvcli/py_srvcli`` directory, create a new "
"file called ``service_member_function.py`` and paste the following code "
"within:"
msgstr ""

#: ../../source/Tutorials/Beginner-Client-Libraries/Writing-A-Simple-Py-Service-And-Client.rst:129
msgid "2.1 Examine the code"
msgstr ""

#: ../../source/Tutorials/Beginner-Client-Libraries/Writing-A-Simple-Py-Service-And-Client.rst:131
msgid ""
"The first ``import`` statement imports the ``AddTwoInts`` service type "
"from the ``example_interfaces`` package. The following ``import`` "
"statement imports the ROS 2 Python client library, and specifically the "
"``Node`` class."
msgstr ""

#: ../../source/Tutorials/Beginner-Client-Libraries/Writing-A-Simple-Py-Service-And-Client.rst:141
msgid ""
"The ``MinimalService`` class constructor initializes the node with the "
"name ``minimal_service``. Then, it creates a service and defines the "
"type, name, and callback."
msgstr ""

#: ../../source/Tutorials/Beginner-Client-Libraries/Writing-A-Simple-Py-Service-And-Client.rst:150
msgid ""
"The definition of the service callback receives the request data, sums "
"it, and returns the sum as a response."
msgstr ""

#: ../../source/Tutorials/Beginner-Client-Libraries/Writing-A-Simple-Py-Service-And-Client.rst:160
msgid ""
"Finally, the main class initializes the ROS 2 Python client library, "
"instantiates the ``MinimalService`` class to create the service node and "
"spins the node to handle callbacks."
msgstr ""

#: ../../source/Tutorials/Beginner-Client-Libraries/Writing-A-Simple-Py-Service-And-Client.rst:163
msgid "2.2 Add an entry point"
msgstr ""

#: ../../source/Tutorials/Beginner-Client-Libraries/Writing-A-Simple-Py-Service-And-Client.rst:165
msgid ""
"To allow the ``ros2 run`` command to run your node, you must add the "
"entry point to ``setup.py`` (located in the ``ros2_ws/src/py_srvcli`` "
"directory)."
msgstr ""

#: ../../source/Tutorials/Beginner-Client-Libraries/Writing-A-Simple-Py-Service-And-Client.rst:167
msgid "Add the following line between the ``'console_scripts':`` brackets:"
msgstr ""

#: ../../source/Tutorials/Beginner-Client-Libraries/Writing-A-Simple-Py-Service-And-Client.rst:174
msgid "3 Write the client node"
msgstr ""

#: ../../source/Tutorials/Beginner-Client-Libraries/Writing-A-Simple-Py-Service-And-Client.rst:176
msgid ""
"Inside the ``ros2_ws/src/py_srvcli/py_srvcli`` directory, create a new "
"file called ``client_member_function.py`` and paste the following code "
"within:"
msgstr ""

#: ../../source/Tutorials/Beginner-Client-Libraries/Writing-A-Simple-Py-Service-And-Client.rst:222
msgid "3.1 Examine the code"
msgstr ""

#: ../../source/Tutorials/Beginner-Client-Libraries/Writing-A-Simple-Py-Service-And-Client.rst:224
msgid "As with the service code, we first ``import`` the necessary libraries."
msgstr ""

#: ../../source/Tutorials/Beginner-Client-Libraries/Writing-A-Simple-Py-Service-And-Client.rst:234
msgid ""
"The ``MinimalClientAsync`` class constructor initializes the node with "
"the name ``minimal_client_async``. The constructor definition creates a "
"client with the same type and name as the service node. The type and name"
" must match for the client and service to be able to communicate. The "
"``while`` loop in the constructor checks if a service matching the type "
"and name of the client is available once a second. Finally it creates a "
"new ``AddTwoInts`` request object."
msgstr ""

#: ../../source/Tutorials/Beginner-Client-Libraries/Writing-A-Simple-Py-Service-And-Client.rst:249
msgid ""
"Below the constructor is the ``send_request`` method, which will send the"
" request and spin until it receives the response or fails."
msgstr ""

#: ../../source/Tutorials/Beginner-Client-Libraries/Writing-A-Simple-Py-Service-And-Client.rst:260
msgid ""
"Finally we have the ``main`` method, which constructs a "
"``MinimalClientAsync`` object, sends the request using the passed-in "
"command-line arguments, and logs the results."
msgstr ""

#: ../../source/Tutorials/Beginner-Client-Libraries/Writing-A-Simple-Py-Service-And-Client.rst:278
msgid "3.2 Add an entry point"
msgstr ""

#: ../../source/Tutorials/Beginner-Client-Libraries/Writing-A-Simple-Py-Service-And-Client.rst:280
msgid ""
"Like the service node, you also have to add an entry point to be able to "
"run the client node."
msgstr ""

#: ../../source/Tutorials/Beginner-Client-Libraries/Writing-A-Simple-Py-Service-And-Client.rst:282
msgid ""
"The ``entry_points`` field of your ``setup.py`` file should look like "
"this:"
msgstr ""

#: ../../source/Tutorials/Beginner-Client-Libraries/Writing-A-Simple-Py-Service-And-Client.rst:294
msgid "4 Build and run"
msgstr ""

#: ../../source/Tutorials/Beginner-Client-Libraries/Writing-A-Simple-Py-Service-And-Client.rst:296
msgid ""
"It's good practice to run ``rosdep`` in the root of your workspace "
"(``ros2_ws``) to check for missing dependencies before building:"
msgstr ""

#: ../../source/Tutorials/Beginner-Client-Libraries/Writing-A-Simple-Py-Service-And-Client.rst:300
#: ../../source/Tutorials/Beginner-Client-Libraries/Writing-A-Simple-Py-Service-And-Client.rst:325
msgid "Linux"
msgstr ""

#: ../../source/Tutorials/Beginner-Client-Libraries/Writing-A-Simple-Py-Service-And-Client.rst:306
#: ../../source/Tutorials/Beginner-Client-Libraries/Writing-A-Simple-Py-Service-And-Client.rst:331
msgid "macOS"
msgstr ""

#: ../../source/Tutorials/Beginner-Client-Libraries/Writing-A-Simple-Py-Service-And-Client.rst:308
#: ../../source/Tutorials/Beginner-Client-Libraries/Writing-A-Simple-Py-Service-And-Client.rst:312
msgid "rosdep only runs on Linux, so you can skip ahead to next step."
msgstr ""

#: ../../source/Tutorials/Beginner-Client-Libraries/Writing-A-Simple-Py-Service-And-Client.rst:310
#: ../../source/Tutorials/Beginner-Client-Libraries/Writing-A-Simple-Py-Service-And-Client.rst:337
msgid "Windows"
msgstr ""

#: ../../source/Tutorials/Beginner-Client-Libraries/Writing-A-Simple-Py-Service-And-Client.rst:315
msgid ""
"Navigate back to the root of your workspace, ``ros2_ws``, and build your "
"new package:"
msgstr ""

#: ../../source/Tutorials/Beginner-Client-Libraries/Writing-A-Simple-Py-Service-And-Client.rst:321
msgid "Open a new terminal, navigate to ``ros2_ws``, and source the setup files:"
msgstr ""

#: ../../source/Tutorials/Beginner-Client-Libraries/Writing-A-Simple-Py-Service-And-Client.rst:343
msgid "Now run the service node:"
msgstr ""

#: ../../source/Tutorials/Beginner-Client-Libraries/Writing-A-Simple-Py-Service-And-Client.rst:349
msgid "The node will wait for the client's request."
msgstr ""

#: ../../source/Tutorials/Beginner-Client-Libraries/Writing-A-Simple-Py-Service-And-Client.rst:351
msgid ""
"Open another terminal and source the setup files from inside ``ros2_ws`` "
"again. Start the client node, followed by any two integers separated by a"
" space:"
msgstr ""

#: ../../source/Tutorials/Beginner-Client-Libraries/Writing-A-Simple-Py-Service-And-Client.rst:358
msgid ""
"If you chose ``2`` and ``3``, for example, the client would receive a "
"response like this:"
msgstr ""

#: ../../source/Tutorials/Beginner-Client-Libraries/Writing-A-Simple-Py-Service-And-Client.rst:364
msgid ""
"Return to the terminal where your service node is running. You will see "
"that it published log messages when it received the request:"
msgstr ""

#: ../../source/Tutorials/Beginner-Client-Libraries/Writing-A-Simple-Py-Service-And-Client.rst:372
msgid "Enter ``Ctrl+C`` in the server terminal to stop the node from spinning."
msgstr ""

#: ../../source/Tutorials/Beginner-Client-Libraries/Writing-A-Simple-Py-Service-And-Client.rst:376
msgid "Summary"
msgstr ""

#: ../../source/Tutorials/Beginner-Client-Libraries/Writing-A-Simple-Py-Service-And-Client.rst:378
msgid ""
"You created two nodes to request and respond to data over a service. You "
"added their dependencies and executables to the package configuration "
"files so that you could build and run them, allowing you to see a "
"service/client system at work."
msgstr ""

#: ../../source/Tutorials/Beginner-Client-Libraries/Writing-A-Simple-Py-Service-And-Client.rst:382
msgid "Next steps"
msgstr ""

#: ../../source/Tutorials/Beginner-Client-Libraries/Writing-A-Simple-Py-Service-And-Client.rst:384
msgid ""
"In the last few tutorials you've been utilizing interfaces to pass data "
"across topics and services. Next, you'll learn how to :doc:`create custom"
" interfaces <./Custom-ROS2-Interfaces>`."
msgstr ""

#: ../../source/Tutorials/Beginner-Client-Libraries/Writing-A-Simple-Py-Service-And-Client.rst:388
msgid "Related content"
msgstr ""

#: ../../source/Tutorials/Beginner-Client-Libraries/Writing-A-Simple-Py-Service-And-Client.rst:390
msgid ""
"There are several ways you could write a service and client in Python; "
"check out the ``minimal_client`` and ``minimal_service`` packages in the "
"`ros2/examples "
"<https://github.com/ros2/examples/tree/rolling/rclpy/services>`_ repo."
msgstr ""

#: ../../source/Tutorials/Beginner-Client-Libraries/Writing-A-Simple-Py-Service-And-Client.rst:392
msgid ""
"In this tutorial, you used the ``call_async()`` API in your client node "
"to call the service. There is another service call API available for "
"Python called synchronous calls. We do not recommend using synchronous "
"calls, but if you'd like to learn more about them, read the guide to "
":doc:`Synchronous vs. asynchronous clients <../../How-To-Guides/Sync-Vs-"
"Async>`."
msgstr ""

