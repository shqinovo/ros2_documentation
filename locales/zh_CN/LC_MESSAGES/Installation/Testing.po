# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2023, Open Robotics
# This file is distributed under the same license as the ROS 2 documentation
# package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2023.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: ROS 2 documentation \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2023-12-08 06:20+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language: zh_CN\n"
"Language-Team: zh_CN <LL@li.org>\n"
"Plural-Forms: nplurals=1; plural=0;\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.12.1\n"

#: ../../source/Installation/Testing.rst:6
msgid "Testing with pre-release binaries"
msgstr ""

#: ../../source/Installation/Testing.rst:8
msgid ""
"Many ROS packages are provided as pre-built binaries. Usually, you will "
"get the released version of binaries when following "
":doc:`../Installation`. There are also pre-released versions of binaries "
"that are useful for testing before making an official release. This "
"article describes several options if you would like to try out pre-"
"released versions of ROS binaries."
msgstr ""

#: ../../source/Installation/Testing.rst:14
msgid "Debian testing repository"
msgstr ""

#: ../../source/Installation/Testing.rst:16
msgid ""
"When packages are released into a ROS distribution (using bloom), the "
"buildfarm builds them into debian packages which are stored temporarily "
"in the **building** apt repository. As dependent packages are rebuilt, an"
" automatic process periodically synchronizes the packages in **building**"
" to a secondary repository called **ros-testing**. **ros-testing** is "
"intended as a soaking area where developers and bleeding-edge users may "
"give the packages extra testing, before they are manually synced into the"
" public ros repository from which users typically install packages."
msgstr ""

#: ../../source/Installation/Testing.rst:20
msgid ""
"Approximately every two weeks, the rosdistro's release manager manually "
"synchronizes the contents of **ros-testing** into the **main** ROS "
"repository."
msgstr ""

#: ../../source/Installation/Testing.rst:22
msgid ""
"For Debian-based operating systems, you can install binary packages from "
"the **ros-testing** repository."
msgstr ""

#: ../../source/Installation/Testing.rst:24
msgid ""
"Make sure you have a working ROS 2 installation from Debian packages (see"
" :doc:`../Installation`)."
msgstr ""

#: ../../source/Installation/Testing.rst:26
msgid ""
"Edit (with sudo) the file ``/etc/apt/sources.list.d/ros2.list`` and "
"change ``ros2`` with ``ros2-testing``. For example, on Ubuntu Jammy the "
"contents should look like the following:"
msgstr ""

#: ../../source/Installation/Testing.rst:34
msgid "Update the ``apt`` index:"
msgstr ""

#: ../../source/Installation/Testing.rst:40
msgid ""
"You can now install individual packages from the testing repository, for "
"example:"
msgstr ""

#: ../../source/Installation/Testing.rst:46
msgid ""
"Alternatively, you can move your entire ROS 2 installation to the testing"
" repository:"
msgstr ""

#: ../../source/Installation/Testing.rst:52
msgid ""
"Once you are finished testing, you can switch back to the normal "
"repository by changing back the contents of "
"``/etc/apt/sources.list.d/ros2.list``:"
msgstr ""

#: ../../source/Installation/Testing.rst:59
msgid "and doing an update and upgrade:"
msgstr ""

#: ../../source/Installation/Testing.rst:69
msgid "Fat binaries"
msgstr ""

#: ../../source/Installation/Testing.rst:71
msgid ""
"For core packages, we run nightly packaging jobs for Ubuntu Linux, RHEL, "
"and Windows. These packaging jobs produce archives with pre-built "
"binaries that can be downloaded and extracted to your filesystem."
msgstr ""

#: ../../source/Installation/Testing.rst:74
msgid ""
"Make sure you have all dependencies installed according to the "
":doc:`latest development setup <Alternatives/Latest-Development-Setup>` "
"for your platform."
msgstr ""

#: ../../source/Installation/Testing.rst:76
msgid ""
"Go to https://ci.ros2.org/view/packaging/ and select a packaging job from"
" the list corresponding to your platform."
msgstr ""

#: ../../source/Installation/Testing.rst:78
msgid ""
"Under the heading \"Last Successful Artifacts\" you should see a download"
" link (e.g. for Windows, ``ros2-package-windows-AMD64.zip``)."
msgstr ""

#: ../../source/Installation/Testing.rst:80
msgid "Download and extract the archive to your file system."
msgstr ""

#: ../../source/Installation/Testing.rst:82
msgid ""
"To use the fat binary installation, source the ``setup.*`` file that can "
"be found in the root of the archive."
msgstr ""

#: ../../source/Installation/Testing.rst:86
msgid "Ubuntu Linux and RHEL"
msgstr ""

#: ../../source/Installation/Testing.rst:92
msgid "Windows"
msgstr ""

#: ../../source/Installation/Testing.rst:99
msgid "Docker"
msgstr ""

#: ../../source/Installation/Testing.rst:101
msgid ""
"For Ubuntu Linux, there is also a nightly Docker image based on the "
"nightly fat archive."
msgstr ""

#: ../../source/Installation/Testing.rst:103
msgid "Pull the Docker image:"
msgstr ""

#: ../../source/Installation/Testing.rst:109
msgid "Start an interactive container:"
msgstr ""

#: ../../source/Installation/Testing.rst:115
msgid ""
"For support on running GUI applications in Docker, take a look at the "
"tutorial `User GUI's with Docker "
"<https://wiki.ros.org/docker/Tutorials/GUI>`_ or the tool `rocker "
"<https://github.com/osrf/rocker>`_."
msgstr ""

