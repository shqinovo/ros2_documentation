# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2023, Open Robotics
# This file is distributed under the same license as the ROS 2 documentation
# package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2023.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: ROS 2 documentation \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2023-12-08 06:20+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language: zh_CN\n"
"Language-Team: zh_CN <LL@li.org>\n"
"Plural-Forms: nplurals=1; plural=0;\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.12.1\n"

#: ../../source/How-To-Guides/Migrating-from-ROS1/Migrating-CPP-Packages.rst:8
msgid "Migrating C++ Packages"
msgstr ""

#: ../../source/How-To-Guides/Migrating-from-ROS1/Migrating-CPP-Packages.rst:12
msgid "Table of Contents"
msgstr ""

#: ../../source/How-To-Guides/Migrating-from-ROS1/Migrating-CPP-Packages.rst:15
msgid "Build tool"
msgstr ""

#: ../../source/How-To-Guides/Migrating-from-ROS1/Migrating-CPP-Packages.rst:17
msgid ""
"Instead of using ``catkin_make``, ``catkin_make_isolated`` or ``catkin "
"build`` ROS 2 uses the command line tool `colcon "
"<https://design.ros2.org/articles/build_tool.html>`__ to build and "
"install a set of packages. See the :doc:`beginner tutorial "
"<../../Tutorials/Beginner-Client-Libraries/Colcon-Tutorial>` to get "
"started with ``colcon``."
msgstr ""

#: ../../source/How-To-Guides/Migrating-from-ROS1/Migrating-CPP-Packages.rst:21
msgid "Build system"
msgstr ""

#: ../../source/How-To-Guides/Migrating-from-ROS1/Migrating-CPP-Packages.rst:23
msgid ""
"The build system in ROS 2 is called `ament "
"<https://design.ros2.org/articles/ament.html>`__. Ament is built on "
"CMake: ``ament_cmake`` provides CMake functions to make writing "
"``CMakeLists.txt`` files easier."
msgstr ""

#: ../../source/How-To-Guides/Migrating-from-ROS1/Migrating-CPP-Packages.rst:27
msgid "Update the *CMakeLists.txt* to use *ament_cmake*"
msgstr ""

#: ../../source/How-To-Guides/Migrating-from-ROS1/Migrating-CPP-Packages.rst:29
msgid "Apply the following changes to use ``ament_cmake`` instead of ``catkin``:"
msgstr ""

#: ../../source/How-To-Guides/Migrating-from-ROS1/Migrating-CPP-Packages.rst:33
msgid "Set the build type in the ``package.xml`` file export section:"
msgstr ""

#: ../../source/How-To-Guides/Migrating-from-ROS1/Migrating-CPP-Packages.rst:42
msgid ""
"Replace the ``find_package`` invocation with ``catkin`` and the "
"``COMPONENTS`` with:"
msgstr ""

#: ../../source/How-To-Guides/Migrating-from-ROS1/Migrating-CPP-Packages.rst:52
msgid "Move and update the ``catkin_package`` invocation with:"
msgstr ""

#: ../../source/How-To-Guides/Migrating-from-ROS1/Migrating-CPP-Packages.rst:56
msgid ""
"Invoke ``ament_package`` instead but **after** all targets have been "
"registered."
msgstr ""

#: ../../source/How-To-Guides/Migrating-from-ROS1/Migrating-CPP-Packages.rst:59
msgid ""
"The only valid argument for `ament_package "
"<https://github.com/ament/ament_cmake/blob/rolling/ament_cmake_core/cmake/core/ament_package.cmake>`__"
" is ``CONFIG_EXTRAS``. All other arguments are covered by separate "
"functions which all need to be invoked *before* ``ament_package``:"
msgstr ""

#: ../../source/How-To-Guides/Migrating-from-ROS1/Migrating-CPP-Packages.rst:62
msgid ""
"Instead of passing ``CATKIN_DEPENDS ...`` call "
"``ament_export_dependencies(...)`` before."
msgstr ""

#: ../../source/How-To-Guides/Migrating-from-ROS1/Migrating-CPP-Packages.rst:63
msgid ""
"Instead of passing ``INCLUDE_DIRS ...`` call "
"``ament_export_include_directories(...)`` before."
msgstr ""

#: ../../source/How-To-Guides/Migrating-from-ROS1/Migrating-CPP-Packages.rst:64
msgid ""
"Instead of passing ``LIBRARIES ...`` call ``ament_export_libraries(...)``"
" before."
msgstr ""

#: ../../source/How-To-Guides/Migrating-from-ROS1/Migrating-CPP-Packages.rst:67
msgid ""
"Replace the invocation of ``add_message_files``, ``add_service_files`` "
"and ``generate_messages`` with `rosidl_generate_interfaces "
"<https://github.com/ros2/rosidl/blob/rolling/rosidl_cmake/cmake/rosidl_generate_interfaces.cmake>`__."
msgstr ""

#: ../../source/How-To-Guides/Migrating-from-ROS1/Migrating-CPP-Packages.rst:71
msgid ""
"The first argument is the ``target_name``. If you're building just one "
"library it's ``${PROJECT_NAME}``"
msgstr ""

#: ../../source/How-To-Guides/Migrating-from-ROS1/Migrating-CPP-Packages.rst:75
msgid "Followed by the list of message filenames, relative to the package root."
msgstr ""

#: ../../source/How-To-Guides/Migrating-from-ROS1/Migrating-CPP-Packages.rst:78
msgid ""
"If you will be using the list of filenames multiple times, it is "
"recommended to compose a list of message files and pass the list to the "
"function for clarity."
msgstr ""

#: ../../source/How-To-Guides/Migrating-from-ROS1/Migrating-CPP-Packages.rst:81
msgid ""
"The final multi-value-keyword argument fpr ``generate_messages`` is "
"``DEPENDENCIES`` which requires the list of dependent message packages."
msgstr ""

#: ../../source/How-To-Guides/Migrating-from-ROS1/Migrating-CPP-Packages.rst:91
msgid ""
"Remove any occurrences of the *devel space*. Related CMake variables like"
" ``CATKIN_DEVEL_PREFIX`` do not exist anymore."
msgstr ""

#: ../../source/How-To-Guides/Migrating-from-ROS1/Migrating-CPP-Packages.rst:95
msgid ""
"The ``CATKIN_DEPENDS`` and ``DEPENDS`` arguments are passed to the new "
"function `ament_export_dependencies "
"<https://github.com/ament/ament_cmake/blob/rolling/ament_cmake_export_dependencies/cmake/ament_export_dependencies.cmake>`__."
msgstr ""

#: ../../source/How-To-Guides/Migrating-from-ROS1/Migrating-CPP-Packages.rst:96
msgid "``CATKIN_GLOBAL_BIN_DESTINATION``: ``bin``"
msgstr ""

#: ../../source/How-To-Guides/Migrating-from-ROS1/Migrating-CPP-Packages.rst:97
msgid "``CATKIN_GLOBAL_INCLUDE_DESTINATION``: ``include``"
msgstr ""

#: ../../source/How-To-Guides/Migrating-from-ROS1/Migrating-CPP-Packages.rst:98
msgid "``CATKIN_GLOBAL_LIB_DESTINATION``: ``lib``"
msgstr ""

#: ../../source/How-To-Guides/Migrating-from-ROS1/Migrating-CPP-Packages.rst:99
msgid "``CATKIN_GLOBAL_LIBEXEC_DESTINATION``: ``lib``"
msgstr ""

#: ../../source/How-To-Guides/Migrating-from-ROS1/Migrating-CPP-Packages.rst:100
msgid "``CATKIN_GLOBAL_SHARE_DESTINATION``: ``share``"
msgstr ""

#: ../../source/How-To-Guides/Migrating-from-ROS1/Migrating-CPP-Packages.rst:101
msgid "``CATKIN_PACKAGE_BIN_DESTINATION``: ``lib/${PROJECT_NAME}``"
msgstr ""

#: ../../source/How-To-Guides/Migrating-from-ROS1/Migrating-CPP-Packages.rst:102
msgid "``CATKIN_PACKAGE_INCLUDE_DESTINATION``: ``include/${PROJECT_NAME}``"
msgstr ""

#: ../../source/How-To-Guides/Migrating-from-ROS1/Migrating-CPP-Packages.rst:103
msgid "``CATKIN_PACKAGE_LIB_DESTINATION``: ``lib``"
msgstr ""

#: ../../source/How-To-Guides/Migrating-from-ROS1/Migrating-CPP-Packages.rst:104
msgid "``CATKIN_PACKAGE_SHARE_DESTINATION``: ``share/${PROJECT_NAME}``"
msgstr ""

#: ../../source/How-To-Guides/Migrating-from-ROS1/Migrating-CPP-Packages.rst:107
msgid "Unit tests"
msgstr ""

#: ../../source/How-To-Guides/Migrating-from-ROS1/Migrating-CPP-Packages.rst:109
msgid "If you are using gtest:"
msgstr ""

#: ../../source/How-To-Guides/Migrating-from-ROS1/Migrating-CPP-Packages.rst:111
msgid ""
"Replace ``CATKIN_ENABLE_TESTING`` with ``BUILD_TESTING``. Replace "
"``catkin_add_gtest`` with ``ament_add_gtest``."
msgstr ""

#: ../../source/How-To-Guides/Migrating-from-ROS1/Migrating-CPP-Packages.rst:135
msgid ""
"Add ``<test_depend>ament_cmake_gtest</test_depend>`` to your "
"``package.xml``."
msgstr ""

#: ../../source/How-To-Guides/Migrating-from-ROS1/Migrating-CPP-Packages.rst:143
msgid "Linters"
msgstr ""

#: ../../source/How-To-Guides/Migrating-from-ROS1/Migrating-CPP-Packages.rst:145
msgid ""
"In ROS 2 we are working to maintain clean code using linters. The styles "
"for different languages are defined in our :doc:`Developer Guide "
"<../../The-ROS2-Project/Contributing/Developer-Guide>`."
msgstr ""

#: ../../source/How-To-Guides/Migrating-from-ROS1/Migrating-CPP-Packages.rst:148
msgid ""
"If you are starting a project from scratch it is recommended to follow "
"the style guide and turn on the automatic linter unit tests by adding "
"these lines just below ``if(BUILD_TESTING)``:"
msgstr ""

#: ../../source/How-To-Guides/Migrating-from-ROS1/Migrating-CPP-Packages.rst:155
msgid ""
"You will also need to add the following dependencies to your "
"``package.xml``:"
msgstr ""

#: ../../source/How-To-Guides/Migrating-from-ROS1/Migrating-CPP-Packages.rst:163
msgid "Update source code"
msgstr ""

#: ../../source/How-To-Guides/Migrating-from-ROS1/Migrating-CPP-Packages.rst:166
msgid "Messages, services, and actions"
msgstr ""

#: ../../source/How-To-Guides/Migrating-from-ROS1/Migrating-CPP-Packages.rst:168
msgid ""
"The namespace of ROS 2 messages, services, and actions use a subnamespace"
" (``msg``, ``srv``, or ``action``, respectively) after the package name. "
"Therefore an include looks like: ``#include "
"<my_interfaces/msg/my_message.hpp>``. The C++ type is then named: "
"``my_interfaces::msg::MyMessage``."
msgstr ""

#: ../../source/How-To-Guides/Migrating-from-ROS1/Migrating-CPP-Packages.rst:172
msgid ""
"Shared pointer types are provided as typedefs within the message structs:"
" ``my_interfaces::msg::MyMessage::SharedPtr`` as well as "
"``my_interfaces::msg::MyMessage::ConstSharedPtr``."
msgstr ""

#: ../../source/How-To-Guides/Migrating-from-ROS1/Migrating-CPP-Packages.rst:174
msgid ""
"For more details please see the article about the `generated C++ "
"interfaces "
"<https://design.ros2.org/articles/generated_interfaces_cpp.html>`__."
msgstr ""

#: ../../source/How-To-Guides/Migrating-from-ROS1/Migrating-CPP-Packages.rst:176
msgid "The migration requires includes to change by:"
msgstr ""

#: ../../source/How-To-Guides/Migrating-from-ROS1/Migrating-CPP-Packages.rst:179
msgid ""
"inserting the subfolder ``msg`` between the package name and message "
"datatype"
msgstr ""

#: ../../source/How-To-Guides/Migrating-from-ROS1/Migrating-CPP-Packages.rst:180
msgid "changing the included filename from CamelCase to underscore separation"
msgstr ""

#: ../../source/How-To-Guides/Migrating-from-ROS1/Migrating-CPP-Packages.rst:181
msgid "changing from ``*.h`` to ``*.hpp``"
msgstr ""

#: ../../source/How-To-Guides/Migrating-from-ROS1/Migrating-CPP-Packages.rst:192
msgid ""
"The migration requires code to insert the ``msg`` namespace into all "
"instances."
msgstr ""

#: ../../source/How-To-Guides/Migrating-from-ROS1/Migrating-CPP-Packages.rst:195
msgid "Use of service objects"
msgstr ""

#: ../../source/How-To-Guides/Migrating-from-ROS1/Migrating-CPP-Packages.rst:197
msgid ""
"Service callbacks in ROS 2 do not have boolean return values. Instead of "
"returning false on failures, throwing exceptions is recommended."
msgstr ""

#: ../../source/How-To-Guides/Migrating-from-ROS1/Migrating-CPP-Packages.rst:218
msgid "Usages of ros::Time"
msgstr ""

#: ../../source/How-To-Guides/Migrating-from-ROS1/Migrating-CPP-Packages.rst:220
msgid "For usages of ``ros::Time``:"
msgstr ""

#: ../../source/How-To-Guides/Migrating-from-ROS1/Migrating-CPP-Packages.rst:222
msgid "Replace all instances of ``ros::Time`` with ``rclcpp::Time``"
msgstr ""

#: ../../source/How-To-Guides/Migrating-from-ROS1/Migrating-CPP-Packages.rst:224
msgid "If your messages or code makes use of std_msgs::Time:"
msgstr ""

#: ../../source/How-To-Guides/Migrating-from-ROS1/Migrating-CPP-Packages.rst:226
msgid "Convert all instances of std_msgs::Time to builtin_interfaces::msg::Time"
msgstr ""

#: ../../source/How-To-Guides/Migrating-from-ROS1/Migrating-CPP-Packages.rst:228
msgid ""
"Convert all ``#include \"std_msgs/time.h`` to ``#include "
"\"builtin_interfaces/msg/time.hpp\"``"
msgstr ""

#: ../../source/How-To-Guides/Migrating-from-ROS1/Migrating-CPP-Packages.rst:230
msgid ""
"Convert all instances using the std_msgs::Time field ``nsec`` to the "
"builtin_interfaces::msg::Time field ``nanosec``"
msgstr ""

#: ../../source/How-To-Guides/Migrating-from-ROS1/Migrating-CPP-Packages.rst:233
msgid "Usages of ros::Rate"
msgstr ""

#: ../../source/How-To-Guides/Migrating-from-ROS1/Migrating-CPP-Packages.rst:235
msgid ""
"There is an equivalent type ``rclcpp::Rate`` object which is basically a "
"drop in replacement for ``ros::Rate``."
msgstr ""

#: ../../source/How-To-Guides/Migrating-from-ROS1/Migrating-CPP-Packages.rst:239
msgid "Boost"
msgstr ""

#: ../../source/How-To-Guides/Migrating-from-ROS1/Migrating-CPP-Packages.rst:241
msgid ""
"Much of the functionality previously provided by Boost has been "
"integrated into the C++ standard library. As such we would like to take "
"advantage of the new core features and avoid the dependency on boost "
"where possible."
msgstr ""

#: ../../source/How-To-Guides/Migrating-from-ROS1/Migrating-CPP-Packages.rst:245
msgid "Shared Pointers"
msgstr ""

#: ../../source/How-To-Guides/Migrating-from-ROS1/Migrating-CPP-Packages.rst:247
msgid "To switch shared pointers from boost to standard C++ replace instances of:"
msgstr ""

#: ../../source/How-To-Guides/Migrating-from-ROS1/Migrating-CPP-Packages.rst:250
msgid "``#include <boost/shared_ptr.hpp>`` with ``#include <memory>``"
msgstr ""

#: ../../source/How-To-Guides/Migrating-from-ROS1/Migrating-CPP-Packages.rst:251
msgid "``boost::shared_ptr`` with ``std::shared_ptr``"
msgstr ""

#: ../../source/How-To-Guides/Migrating-from-ROS1/Migrating-CPP-Packages.rst:253
msgid ""
"There may also be variants such as ``weak_ptr`` which you want to convert"
" as well."
msgstr ""

#: ../../source/How-To-Guides/Migrating-from-ROS1/Migrating-CPP-Packages.rst:255
msgid ""
"Also it is recommended practice to use ``using`` instead of ``typedef``. "
"``using`` has the ability to work better in templated logic. For details "
"`see here <https://stackoverflow.com/questions/10747810/what-is-the-"
"difference-between-typedef-and-using-in-c11>`__"
msgstr ""

#: ../../source/How-To-Guides/Migrating-from-ROS1/Migrating-CPP-Packages.rst:260
msgid "Thread/Mutexes"
msgstr ""

#: ../../source/How-To-Guides/Migrating-from-ROS1/Migrating-CPP-Packages.rst:262
msgid ""
"Another common part of boost used in ROS codebases are mutexes in "
"``boost::thread``."
msgstr ""

#: ../../source/How-To-Guides/Migrating-from-ROS1/Migrating-CPP-Packages.rst:265
msgid ""
"Replace ``boost::mutex::scoped_lock`` with "
"``std::unique_lock<std::mutex>``"
msgstr ""

#: ../../source/How-To-Guides/Migrating-from-ROS1/Migrating-CPP-Packages.rst:266
msgid "Replace ``boost::mutex`` with ``std::mutex``"
msgstr ""

#: ../../source/How-To-Guides/Migrating-from-ROS1/Migrating-CPP-Packages.rst:267
msgid "Replace ``#include <boost/thread/mutex.hpp>`` with ``#include <mutex>``"
msgstr ""

#: ../../source/How-To-Guides/Migrating-from-ROS1/Migrating-CPP-Packages.rst:270
msgid "Unordered Map"
msgstr ""

#: ../../source/How-To-Guides/Migrating-from-ROS1/Migrating-CPP-Packages.rst:272
#: ../../source/How-To-Guides/Migrating-from-ROS1/Migrating-CPP-Packages.rst:281
msgid "Replace:"
msgstr ""

#: ../../source/How-To-Guides/Migrating-from-ROS1/Migrating-CPP-Packages.rst:275
msgid "``#include <boost/unordered_map.hpp>`` with ``#include <unordered_map>``"
msgstr ""

#: ../../source/How-To-Guides/Migrating-from-ROS1/Migrating-CPP-Packages.rst:276
msgid "``boost::unordered_map`` with ``std::unordered_map``"
msgstr ""

#: ../../source/How-To-Guides/Migrating-from-ROS1/Migrating-CPP-Packages.rst:279
msgid "function"
msgstr ""

#: ../../source/How-To-Guides/Migrating-from-ROS1/Migrating-CPP-Packages.rst:284
msgid "``#include <boost/function.hpp>``  with ``#include <functional>``"
msgstr ""

#: ../../source/How-To-Guides/Migrating-from-ROS1/Migrating-CPP-Packages.rst:285
msgid "``boost::function`` with ``std::function``"
msgstr ""

#: ../../source/How-To-Guides/Migrating-from-ROS1/Migrating-CPP-Packages.rst:288
msgid "Example: Converting an existing ROS 1 package to ROS 2"
msgstr ""

#: ../../source/How-To-Guides/Migrating-from-ROS1/Migrating-CPP-Packages.rst:290
msgid ""
"Let's say that we have simple ROS 1 package called ``talker`` that uses "
"``roscpp`` in one node, called ``talker``. This package is in a catkin "
"workspace, located at ``~/ros1_talker``."
msgstr ""

#: ../../source/How-To-Guides/Migrating-from-ROS1/Migrating-CPP-Packages.rst:294
msgid "The ROS 1 code"
msgstr ""

#: ../../source/How-To-Guides/Migrating-from-ROS1/Migrating-CPP-Packages.rst:296
msgid "Here's the directory layout of our catkin workspace:"
msgstr ""

#: ../../source/How-To-Guides/Migrating-from-ROS1/Migrating-CPP-Packages.rst:309
msgid "Here is the content of those three files:"
msgstr ""

#: ../../source/How-To-Guides/Migrating-from-ROS1/Migrating-CPP-Packages.rst:311
msgid "``src/talker/package.xml``:"
msgstr ""

#: ../../source/How-To-Guides/Migrating-from-ROS1/Migrating-CPP-Packages.rst:328
msgid "``src/talker/CMakeLists.txt``:"
msgstr ""

#: ../../source/How-To-Guides/Migrating-from-ROS1/Migrating-CPP-Packages.rst:342
msgid "``src/talker/talker.cpp``:"
msgstr ""

#: ../../source/How-To-Guides/Migrating-from-ROS1/Migrating-CPP-Packages.rst:371
msgid "Building the ROS 1 code"
msgstr ""

#: ../../source/How-To-Guides/Migrating-from-ROS1/Migrating-CPP-Packages.rst:373
msgid ""
"We source an environment setup file (in this case for Noetic using bash),"
" then we build our package using ``catkin_make install``:"
msgstr ""

#: ../../source/How-To-Guides/Migrating-from-ROS1/Migrating-CPP-Packages.rst:383
msgid "Running the ROS 1 node"
msgstr ""

#: ../../source/How-To-Guides/Migrating-from-ROS1/Migrating-CPP-Packages.rst:385
msgid ""
"If there's not already one running, we start a ``roscore``, first "
"sourcing the setup file from our ``catkin`` install tree (the system "
"setup file at ``/opt/ros/noetic/setup.bash`` would also work here):"
msgstr ""

#: ../../source/How-To-Guides/Migrating-from-ROS1/Migrating-CPP-Packages.rst:394
msgid ""
"In another shell, we run the node from the ``catkin`` install space using"
" ``rosrun``, again sourcing the setup file first (in this case it must be"
" the one from our workspace):"
msgstr ""

#: ../../source/How-To-Guides/Migrating-from-ROS1/Migrating-CPP-Packages.rst:404
msgid "Migrating to ROS 2"
msgstr ""

#: ../../source/How-To-Guides/Migrating-from-ROS1/Migrating-CPP-Packages.rst:406
msgid "Let's start by creating a new workspace in which to work:"
msgstr ""

#: ../../source/How-To-Guides/Migrating-from-ROS1/Migrating-CPP-Packages.rst:413
msgid ""
"We'll copy the source tree from our ROS 1 package into that workspace, "
"where we can modify it:"
msgstr ""

#: ../../source/How-To-Guides/Migrating-from-ROS1/Migrating-CPP-Packages.rst:420
msgid ""
"Now we'll modify the C++ code in the node. The ROS 2 C++ library, called "
"``rclcpp``, provides a different API from that provided by ``roscpp``. "
"The concepts are very similar between the two libraries, which makes the "
"changes reasonably straightforward to make."
msgstr ""

#: ../../source/How-To-Guides/Migrating-from-ROS1/Migrating-CPP-Packages.rst:427
msgid "Included headers"
msgstr ""

#: ../../source/How-To-Guides/Migrating-from-ROS1/Migrating-CPP-Packages.rst:429
msgid ""
"In place of ``ros/ros.h``, which gave us access to the ``roscpp`` library"
" API, we need to include ``rclcpp/rclcpp.hpp``, which gives us access to "
"the ``rclcpp`` library API:"
msgstr ""

#: ../../source/How-To-Guides/Migrating-from-ROS1/Migrating-CPP-Packages.rst:438
msgid ""
"To get the ``std_msgs/String`` message definition, in place of "
"``std_msgs/String.h``, we need to include ``std_msgs/msg/string.hpp``:"
msgstr ""

#: ../../source/How-To-Guides/Migrating-from-ROS1/Migrating-CPP-Packages.rst:447
msgid "Changing C++ library calls"
msgstr ""

#: ../../source/How-To-Guides/Migrating-from-ROS1/Migrating-CPP-Packages.rst:449
msgid ""
"Instead of passing the node's name to the library initialization call, we"
" do the initialization, then pass the node name to the creation of the "
"node object:"
msgstr ""

#: ../../source/How-To-Guides/Migrating-from-ROS1/Migrating-CPP-Packages.rst:459
msgid ""
"The creation of the publisher and rate objects looks pretty similar, with"
" some changes to the names of namespace and methods."
msgstr ""

#: ../../source/How-To-Guides/Migrating-from-ROS1/Migrating-CPP-Packages.rst:470
msgid ""
"To further control how message delivery is handled, a quality of service "
"(``QoS``) profile could be passed in. The default profile is "
"``rmw_qos_profile_default``. For more details, see the `design document "
"<https://design.ros2.org/articles/qos.html>`__ and :doc:`concept overview"
" <../../Concepts/Intermediate/About-Quality-of-Service-Settings>`."
msgstr ""

#: ../../source/How-To-Guides/Migrating-from-ROS1/Migrating-CPP-Packages.rst:477
msgid "The creation of the outgoing message is different in the namespace:"
msgstr ""

#: ../../source/How-To-Guides/Migrating-from-ROS1/Migrating-CPP-Packages.rst:484
msgid "In place of ``ros::ok()``, we call ``rclcpp::ok()``:"
msgstr ""

#: ../../source/How-To-Guides/Migrating-from-ROS1/Migrating-CPP-Packages.rst:491
msgid "Inside the publishing loop, we access the ``data`` field as before:"
msgstr ""

#: ../../source/How-To-Guides/Migrating-from-ROS1/Migrating-CPP-Packages.rst:497
msgid ""
"To print a console message, instead of using ``ROS_INFO()``, we use "
"``RCLCPP_INFO()`` and its various cousins. The key difference is that "
"``RCLCPP_INFO()`` takes a Logger object as the first argument."
msgstr ""

#: ../../source/How-To-Guides/Migrating-from-ROS1/Migrating-CPP-Packages.rst:507
msgid "Publishing the message is the same as before:"
msgstr ""

#: ../../source/How-To-Guides/Migrating-from-ROS1/Migrating-CPP-Packages.rst:513
msgid ""
"Spinning (i.e., letting the communications system process any pending "
"incoming/outgoing messages) is different in that the call now takes the "
"node as an argument:"
msgstr ""

#: ../../source/How-To-Guides/Migrating-from-ROS1/Migrating-CPP-Packages.rst:522
msgid "Sleeping using the rate object is unchanged."
msgstr ""

#: ../../source/How-To-Guides/Migrating-from-ROS1/Migrating-CPP-Packages.rst:524
msgid "Putting it all together, the new ``talker.cpp`` looks like this:"
msgstr ""

#: ../../source/How-To-Guides/Migrating-from-ROS1/Migrating-CPP-Packages.rst:563
msgid "Changing the ``package.xml``"
msgstr ""

#: ../../source/How-To-Guides/Migrating-from-ROS1/Migrating-CPP-Packages.rst:565
msgid ""
"ROS 2 uses a newer version of ``catkin``, called ``ament_cmake``, which "
"we specify in the ``buildtool_depend`` tag:"
msgstr ""

#: ../../source/How-To-Guides/Migrating-from-ROS1/Migrating-CPP-Packages.rst:573
msgid ""
"In our build dependencies, instead of ``roscpp`` we use ``rclcpp``, which"
" provides the C++ API that we use."
msgstr ""

#: ../../source/How-To-Guides/Migrating-from-ROS1/Migrating-CPP-Packages.rst:580
msgid ""
"We make the same addition in the run dependencies and also update from "
"the ``run_depend`` tag to the ``exec_depend`` tag (part of the upgrade to"
" version 2 of the package format):"
msgstr ""

#: ../../source/How-To-Guides/Migrating-from-ROS1/Migrating-CPP-Packages.rst:590
msgid ""
"In ROS 1, we use ``<depend>`` to simplify specifying dependencies for "
"both compile-time and runtime. We can do the same in ROS 2:"
msgstr ""

#: ../../source/How-To-Guides/Migrating-from-ROS1/Migrating-CPP-Packages.rst:599
msgid ""
"We also need to tell the build tool what *kind* of package we are, so "
"that it knows how to build us. Because we're using ``ament`` and CMake, "
"we add the following lines to declare our build type to be "
"``ament_cmake``:"
msgstr ""

#: ../../source/How-To-Guides/Migrating-from-ROS1/Migrating-CPP-Packages.rst:610
msgid "Putting it all together, our ``package.xml`` now looks like this:"
msgstr ""

#: ../../source/How-To-Guides/Migrating-from-ROS1/Migrating-CPP-Packages.rst:635
msgid "Changing the CMake code"
msgstr ""

#: ../../source/How-To-Guides/Migrating-from-ROS1/Migrating-CPP-Packages.rst:637
msgid "ROS 2 relies on a higher version of CMake:"
msgstr ""

#: ../../source/How-To-Guides/Migrating-from-ROS1/Migrating-CPP-Packages.rst:644
msgid ""
"ROS 2 relies on the C++17 standard. Depending on what compiler you're "
"using, support for C++17 might not be enabled by default. Enable C++17 "
"support explicitly by adding this line near the top of the file:"
msgstr ""

#: ../../source/How-To-Guides/Migrating-from-ROS1/Migrating-CPP-Packages.rst:652
msgid "The preferred way to work on all platforms is this:"
msgstr ""

#: ../../source/How-To-Guides/Migrating-from-ROS1/Migrating-CPP-Packages.rst:663
msgid ""
"Using ``catkin``, we specify the packages we want to build against by "
"passing them as ``COMPONENTS`` arguments when initially finding "
"``catkin`` itself. With ``ament_cmake``, we find each package "
"individually, starting with ``ament_cmake``:"
msgstr ""

#: ../../source/How-To-Guides/Migrating-from-ROS1/Migrating-CPP-Packages.rst:674
msgid "System dependencies can be found as before:"
msgstr ""

#: ../../source/How-To-Guides/Migrating-from-ROS1/Migrating-CPP-Packages.rst:680
msgid ""
"We call ``catkin_package()`` to auto-generate things like CMake "
"configuration files for other packages that use our package. Whereas that"
" call happens *before* specifying targets to build, we now call the "
"analogous ``ament_package()`` *after* the targets:"
msgstr ""

#: ../../source/How-To-Guides/Migrating-from-ROS1/Migrating-CPP-Packages.rst:691
msgid ""
"The only directories that need to be manually included are local "
"directories and dependencies that are not ament packages:"
msgstr ""

#: ../../source/How-To-Guides/Migrating-from-ROS1/Migrating-CPP-Packages.rst:699
msgid ""
"A better alternative is to specify include directories for each target "
"individually, rather than including all the directories for all targets:"
msgstr ""

#: ../../source/How-To-Guides/Migrating-from-ROS1/Migrating-CPP-Packages.rst:706
msgid ""
"Similar to how we found each dependent package separately, we need to "
"link each one to the build target. To link with dependent packages that "
"are ament packages, instead of using ``target_link_libraries()``, "
"``ament_target_dependencies()`` is a more concise and more thorough way "
"of handling build flags. It automatically handles both the include "
"directories defined in ``_INCLUDE_DIRS`` and linking libraries defined in"
" ``_LIBRARIES``."
msgstr ""

#: ../../source/How-To-Guides/Migrating-from-ROS1/Migrating-CPP-Packages.rst:721
msgid ""
"To link with packages that are not ament packages, such as system "
"dependencies like ``Boost``, or a library being built in the same "
"``CMakeLists.txt``, use ``target_link_libraries()``:"
msgstr ""

#: ../../source/How-To-Guides/Migrating-from-ROS1/Migrating-CPP-Packages.rst:729
msgid ""
"For installation, ``catkin`` defines variables like "
"``CATKIN_PACKAGE_BIN_DESTINATION``. With ``ament_cmake``, we just give a "
"path relative to the installation root:"
msgstr ""

#: ../../source/How-To-Guides/Migrating-from-ROS1/Migrating-CPP-Packages.rst:739
msgid ""
"Optionally, we can install and export the included directories for "
"downstream packages:"
msgstr ""

#: ../../source/How-To-Guides/Migrating-from-ROS1/Migrating-CPP-Packages.rst:747
msgid "Optionally, we can export dependencies for downstream packages:"
msgstr ""

#: ../../source/How-To-Guides/Migrating-from-ROS1/Migrating-CPP-Packages.rst:753
msgid "Putting it all together, the new ``CMakeLists.txt`` looks like this:"
msgstr ""

#: ../../source/How-To-Guides/Migrating-from-ROS1/Migrating-CPP-Packages.rst:789
msgid "Building the ROS 2 code"
msgstr ""

#: ../../source/How-To-Guides/Migrating-from-ROS1/Migrating-CPP-Packages.rst:791
msgid ""
"We source an environment setup file (in this case the one generated by "
"following the ROS 2 installation tutorial, which builds in ``~/ros2_ws``,"
" then we build our package using ``colcon build``:"
msgstr ""

#: ../../source/How-To-Guides/Migrating-from-ROS1/Migrating-CPP-Packages.rst:802
msgid "Running the ROS 2 node"
msgstr ""

#: ../../source/How-To-Guides/Migrating-from-ROS1/Migrating-CPP-Packages.rst:804
msgid ""
"Because we installed the ``talker`` executable into the correct "
"directory, after sourcing the setup file, from our install tree, we can "
"invoke it by running:"
msgstr ""

