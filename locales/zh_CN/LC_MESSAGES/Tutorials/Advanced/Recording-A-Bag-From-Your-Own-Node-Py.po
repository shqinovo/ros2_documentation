# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2023, Open Robotics
# This file is distributed under the same license as the ROS 2 documentation
# package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2023.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: ROS 2 documentation \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2023-12-08 06:20+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language: zh_CN\n"
"Language-Team: zh_CN <LL@li.org>\n"
"Plural-Forms: nplurals=1; plural=0;\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.12.1\n"

#: ../../source/Tutorials/Advanced/Recording-A-Bag-From-Your-Own-Node-Py.rst:8
msgid "Recording a bag from a node (Python)"
msgstr ""

#: ../../source/Tutorials/Advanced/Recording-A-Bag-From-Your-Own-Node-Py.rst:10
msgid "**Goal:** Record data from your own Python node to a bag."
msgstr ""

#: ../../source/Tutorials/Advanced/Recording-A-Bag-From-Your-Own-Node-Py.rst:12
msgid "**Tutorial level:** Advanced"
msgstr ""

#: ../../source/Tutorials/Advanced/Recording-A-Bag-From-Your-Own-Node-Py.rst:14
msgid "**Time:** 20 minutes"
msgstr ""

#: ../../source/Tutorials/Advanced/Recording-A-Bag-From-Your-Own-Node-Py.rst:18
msgid "Contents"
msgstr ""

#: ../../source/Tutorials/Advanced/Recording-A-Bag-From-Your-Own-Node-Py.rst:21
msgid "Background"
msgstr ""

#: ../../source/Tutorials/Advanced/Recording-A-Bag-From-Your-Own-Node-Py.rst:23
msgid ""
"``rosbag2`` doesn't just provide the ``ros2 bag`` command line tool. It "
"also provides a Python API for reading from and writing to a bag from "
"your own source code. This allows you to subscribe to a topic and save "
"the received data to a bag at the same time as performing any other "
"processing of your choice on that data. You may do this, for example, to "
"save data from a topic and the result of processing that data without "
"needing to send the processed data over a topic just to record it. "
"Because any data can be recorded in a bag, it is also possible to save "
"data generated by another source than a topic, such as synthetic data for"
" training sets. This is useful, for example, for quickly generating a bag"
" that contains a large number of samples spread over a long playback "
"time."
msgstr ""

#: ../../source/Tutorials/Advanced/Recording-A-Bag-From-Your-Own-Node-Py.rst:31
msgid "Prerequisites"
msgstr ""

#: ../../source/Tutorials/Advanced/Recording-A-Bag-From-Your-Own-Node-Py.rst:33
msgid ""
"You should have the ``rosbag2`` packages installed as part of your "
"regular ROS 2 setup."
msgstr ""

#: ../../source/Tutorials/Advanced/Recording-A-Bag-From-Your-Own-Node-Py.rst:35
msgid ""
"If you've installed from Debian packages on Linux, it may be installed by"
" default. If it is not, you can install it using this command."
msgstr ""

#: ../../source/Tutorials/Advanced/Recording-A-Bag-From-Your-Own-Node-Py.rst:42
msgid ""
"This tutorial discusses using ROS 2 bags, including from the terminal. "
"You should have already completed the :doc:`basic ROS 2 bag tutorial "
"<../Beginner-CLI-Tools/Recording-And-Playing-Back-Data/Recording-And-"
"Playing-Back-Data>`."
msgstr ""

#: ../../source/Tutorials/Advanced/Recording-A-Bag-From-Your-Own-Node-Py.rst:46
msgid "Tasks"
msgstr ""

#: ../../source/Tutorials/Advanced/Recording-A-Bag-From-Your-Own-Node-Py.rst:49
msgid "1 Create a package"
msgstr ""

#: ../../source/Tutorials/Advanced/Recording-A-Bag-From-Your-Own-Node-Py.rst:51
msgid ""
"Open a new terminal and :doc:`source your ROS 2 installation "
"<../Beginner-CLI-Tools/Configuring-ROS2-Environment>` so that ``ros2`` "
"commands will work."
msgstr ""

#: ../../source/Tutorials/Advanced/Recording-A-Bag-From-Your-Own-Node-Py.rst:53
msgid ""
"Follow :ref:`these instructions <new-directory>` to create a new "
"workspace named ``ros2_ws``."
msgstr ""

#: ../../source/Tutorials/Advanced/Recording-A-Bag-From-Your-Own-Node-Py.rst:55
msgid "Navigate into the ``ros2_ws/src`` directory and create a new package:"
msgstr ""

#: ../../source/Tutorials/Advanced/Recording-A-Bag-From-Your-Own-Node-Py.rst:61
msgid ""
"Your terminal will return a message verifying the creation of your "
"package ``bag_recorder_nodes_py`` and all its necessary files and "
"folders. The ``--dependencies`` argument will automatically add the "
"necessary dependency lines to the ``package.xml``. In this case, the "
"package will use the ``rosbag2_py`` package as well as the ``rclpy`` "
"package. A dependency on the ``example_interfaces`` package is also "
"required for message definitions."
msgstr ""

#: ../../source/Tutorials/Advanced/Recording-A-Bag-From-Your-Own-Node-Py.rst:67
msgid "1.1 Update ``package.xml`` and ``setup.py``"
msgstr ""

#: ../../source/Tutorials/Advanced/Recording-A-Bag-From-Your-Own-Node-Py.rst:69
msgid ""
"Because you used the ``--dependencies`` option during package creation, "
"you don't have to manually add dependencies to ``package.xml``. As "
"always, though, make sure to add the description, maintainer email and "
"name, and license information to ``package.xml``."
msgstr ""

#: ../../source/Tutorials/Advanced/Recording-A-Bag-From-Your-Own-Node-Py.rst:78
msgid "Also be sure to add this information to the ``setup.py`` file as well."
msgstr ""

#: ../../source/Tutorials/Advanced/Recording-A-Bag-From-Your-Own-Node-Py.rst:88
msgid "2 Write the Python node"
msgstr ""

#: ../../source/Tutorials/Advanced/Recording-A-Bag-From-Your-Own-Node-Py.rst:90
msgid ""
"Inside the ``ros2_ws/src/bag_recorder_nodes_py/bag_recorder_nodes_py`` "
"directory, create a new file called ``simple_bag_recorder.py`` and paste "
"the following code into it."
msgstr ""

#: ../../source/Tutorials/Advanced/Recording-A-Bag-From-Your-Own-Node-Py.rst:143
msgid "2.1 Examine the code"
msgstr ""

#: ../../source/Tutorials/Advanced/Recording-A-Bag-From-Your-Own-Node-Py.rst:145
msgid ""
"The ``import`` statements at the top are the package dependencies. Note "
"the importation of the ``rosbag2_py`` package for the functions and "
"structures necessary to work with bag files."
msgstr ""

#: ../../source/Tutorials/Advanced/Recording-A-Bag-From-Your-Own-Node-Py.rst:148
msgid ""
"In the class constructor, we begin by creating the writer object that we "
"will use to write to the bag. We are creating a ``SequentialWriter``, "
"which writes messages into the bag in the order they are received. Other "
"writers with different behaviours may be available in `rosbag2 "
"<https://github.com/ros2/rosbag2/tree/rolling/rosbag2_cpp/include/rosbag2_cpp/writers>`__."
msgstr ""

#: ../../source/Tutorials/Advanced/Recording-A-Bag-From-Your-Own-Node-Py.rst:156
msgid ""
"Now that we have a writer object, we can open the bag using it. We "
"specify the URI of the bag to create and the format (``mcap``), leaving "
"other options at their defaults. The default conversion options are used,"
" which will perform no conversion and store the messages in the "
"serialization format they are received in."
msgstr ""

#: ../../source/Tutorials/Advanced/Recording-A-Bag-From-Your-Own-Node-Py.rst:168
msgid ""
"Next, we need to tell the writer about the topics we wish to store. This "
"is done by creating a ``TopicMetadata`` object and registering it with "
"the writer. This object specifies the topic name, topic data type, and "
"serialization format used."
msgstr ""

#: ../../source/Tutorials/Advanced/Recording-A-Bag-From-Your-Own-Node-Py.rst:180
msgid ""
"With the writer now set up to record data we pass to it, we create a "
"subscription and specify a callback for it. We will write data to the bag"
" in the callback."
msgstr ""

#: ../../source/Tutorials/Advanced/Recording-A-Bag-From-Your-Own-Node-Py.rst:192
msgid ""
"The callback receives the message in unserialized form (as is standard "
"for the ``rclpy`` API) and passes the message to the writer, specifying "
"the topic that the data is for and the timestamp to record with the "
"message. However, the writer requires serialised messages to store in the"
" bag. This means that we need to serialise the data before passing it to "
"the writer. For this reason, we call ``serialize_message()`` and pass the"
" result of that to the writer, rather than passing in the message "
"directly."
msgstr ""

#: ../../source/Tutorials/Advanced/Recording-A-Bag-From-Your-Own-Node-Py.rst:205
msgid ""
"The file finishes with the ``main`` function used to create an instance "
"of the node and start ROS processing it."
msgstr ""

#: ../../source/Tutorials/Advanced/Recording-A-Bag-From-Your-Own-Node-Py.rst:216
msgid "2.2 Add entry point"
msgstr ""

#: ../../source/Tutorials/Advanced/Recording-A-Bag-From-Your-Own-Node-Py.rst:218
#: ../../source/Tutorials/Advanced/Recording-A-Bag-From-Your-Own-Node-Py.rst:417
#: ../../source/Tutorials/Advanced/Recording-A-Bag-From-Your-Own-Node-Py.rst:574
msgid ""
"Open the ``setup.py`` file in the ``bag_recorder_nodes_py`` package and "
"add an entry point for your node."
msgstr ""

#: ../../source/Tutorials/Advanced/Recording-A-Bag-From-Your-Own-Node-Py.rst:230
msgid "3 Build and run"
msgstr ""

#: ../../source/Tutorials/Advanced/Recording-A-Bag-From-Your-Own-Node-Py.rst:232
msgid ""
"Navigate back to the root of your workspace, ``ros2_ws``, and build your "
"new package."
msgstr ""

#: ../../source/Tutorials/Advanced/Recording-A-Bag-From-Your-Own-Node-Py.rst:236
#: ../../source/Tutorials/Advanced/Recording-A-Bag-From-Your-Own-Node-Py.rst:258
#: ../../source/Tutorials/Advanced/Recording-A-Bag-From-Your-Own-Node-Py.rst:435
#: ../../source/Tutorials/Advanced/Recording-A-Bag-From-Your-Own-Node-Py.rst:457
#: ../../source/Tutorials/Advanced/Recording-A-Bag-From-Your-Own-Node-Py.rst:593
#: ../../source/Tutorials/Advanced/Recording-A-Bag-From-Your-Own-Node-Py.rst:615
msgid "Linux"
msgstr ""

#: ../../source/Tutorials/Advanced/Recording-A-Bag-From-Your-Own-Node-Py.rst:242
#: ../../source/Tutorials/Advanced/Recording-A-Bag-From-Your-Own-Node-Py.rst:264
#: ../../source/Tutorials/Advanced/Recording-A-Bag-From-Your-Own-Node-Py.rst:441
#: ../../source/Tutorials/Advanced/Recording-A-Bag-From-Your-Own-Node-Py.rst:463
#: ../../source/Tutorials/Advanced/Recording-A-Bag-From-Your-Own-Node-Py.rst:599
#: ../../source/Tutorials/Advanced/Recording-A-Bag-From-Your-Own-Node-Py.rst:621
msgid "macOS"
msgstr ""

#: ../../source/Tutorials/Advanced/Recording-A-Bag-From-Your-Own-Node-Py.rst:248
#: ../../source/Tutorials/Advanced/Recording-A-Bag-From-Your-Own-Node-Py.rst:270
#: ../../source/Tutorials/Advanced/Recording-A-Bag-From-Your-Own-Node-Py.rst:447
#: ../../source/Tutorials/Advanced/Recording-A-Bag-From-Your-Own-Node-Py.rst:469
#: ../../source/Tutorials/Advanced/Recording-A-Bag-From-Your-Own-Node-Py.rst:605
#: ../../source/Tutorials/Advanced/Recording-A-Bag-From-Your-Own-Node-Py.rst:627
msgid "Windows"
msgstr ""

#: ../../source/Tutorials/Advanced/Recording-A-Bag-From-Your-Own-Node-Py.rst:254
#: ../../source/Tutorials/Advanced/Recording-A-Bag-From-Your-Own-Node-Py.rst:453
msgid "Open a new terminal, navigate to ``ros2_ws``, and source the setup files."
msgstr ""

#: ../../source/Tutorials/Advanced/Recording-A-Bag-From-Your-Own-Node-Py.rst:276
#: ../../source/Tutorials/Advanced/Recording-A-Bag-From-Your-Own-Node-Py.rst:477
msgid "Now run the node:"
msgstr ""

#: ../../source/Tutorials/Advanced/Recording-A-Bag-From-Your-Own-Node-Py.rst:282
msgid "Open a second terminal and run the ``talker`` example node."
msgstr ""

#: ../../source/Tutorials/Advanced/Recording-A-Bag-From-Your-Own-Node-Py.rst:288
msgid ""
"This will start publishing data on the ``chatter`` topic. As the bag-"
"writing node receives this data, it will write it to the ``my_bag`` bag. "
"If the ``my_bag`` directory already exists, you must first delete it "
"before running the ``simple_bag_recorder`` node. This is because "
"``rosbag2`` will not overwrite existing bags by default, and so the "
"destination directory cannot exist."
msgstr ""

#: ../../source/Tutorials/Advanced/Recording-A-Bag-From-Your-Own-Node-Py.rst:293
msgid ""
"Terminate both nodes. Then, in one terminal start the ``listener`` "
"example node."
msgstr ""

#: ../../source/Tutorials/Advanced/Recording-A-Bag-From-Your-Own-Node-Py.rst:300
msgid ""
"In the other terminal, use ``ros2 bag`` to play the bag recorded by your "
"node."
msgstr ""

#: ../../source/Tutorials/Advanced/Recording-A-Bag-From-Your-Own-Node-Py.rst:306
msgid ""
"You will see the messages from the bag being received by the ``listener``"
" node."
msgstr ""

#: ../../source/Tutorials/Advanced/Recording-A-Bag-From-Your-Own-Node-Py.rst:308
msgid ""
"If you wish to run the bag-writing node again, you will first need to "
"delete the ``my_bag`` directory."
msgstr ""

#: ../../source/Tutorials/Advanced/Recording-A-Bag-From-Your-Own-Node-Py.rst:311
msgid "4 Record synthetic data from a node"
msgstr ""

#: ../../source/Tutorials/Advanced/Recording-A-Bag-From-Your-Own-Node-Py.rst:313
msgid ""
"Any data can be recorded into a bag, not just data received over a topic."
" A common use case for writing to a bag from your own node is to generate"
" and store synthetic data. In this section you will learn how to write a "
"node that generates some data and stores it in a bag. We will demonstrate"
" two approaches for doing this. The first uses a node with a timer; this "
"is the approach that you would use if your data generation is external to"
" the node, such as reading data directly from hardware (e.g. a camera). "
"The second approach does not use a node; this is the approach you can use"
" when you do not need to use any functionality from the ROS "
"infrastructure."
msgstr ""

#: ../../source/Tutorials/Advanced/Recording-A-Bag-From-Your-Own-Node-Py.rst:321
msgid "4.1 Write a Python node"
msgstr ""

#: ../../source/Tutorials/Advanced/Recording-A-Bag-From-Your-Own-Node-Py.rst:323
msgid ""
"Inside the ``ros2_ws/src/bag_recorder_nodes_py/bag_recorder_nodes_py`` "
"directory, create a new file called ``data_generator_node.py`` and paste "
"the following code into it."
msgstr ""

#: ../../source/Tutorials/Advanced/Recording-A-Bag-From-Your-Own-Node-Py.rst:374
msgid "4.2 Examine the code"
msgstr ""

#: ../../source/Tutorials/Advanced/Recording-A-Bag-From-Your-Own-Node-Py.rst:376
msgid ""
"Much of this code is the same as the first example. The important "
"differences are described here."
msgstr ""

#: ../../source/Tutorials/Advanced/Recording-A-Bag-From-Your-Own-Node-Py.rst:379
msgid "First, the name of the bag is changed."
msgstr ""

#: ../../source/Tutorials/Advanced/Recording-A-Bag-From-Your-Own-Node-Py.rst:387
msgid "The name of the topic is also changed, as is the data type stored."
msgstr ""

#: ../../source/Tutorials/Advanced/Recording-A-Bag-From-Your-Own-Node-Py.rst:397
msgid ""
"Rather than a subscription to a topic, this node has a timer. The timer "
"fires with a one-second period, and calls the given member function when "
"it does."
msgstr ""

#: ../../source/Tutorials/Advanced/Recording-A-Bag-From-Your-Own-Node-Py.rst:404
msgid ""
"Within the timer callback, we generate (or otherwise obtain, e.g. read "
"from a serial port connected to some hardware) the data we wish to store "
"in the bag. As with the previous example, the data is not yet serialised,"
" so we must serialise it before passing it to the writer."
msgstr ""

#: ../../source/Tutorials/Advanced/Recording-A-Bag-From-Your-Own-Node-Py.rst:415
msgid "4.3 Add executable"
msgstr ""

#: ../../source/Tutorials/Advanced/Recording-A-Bag-From-Your-Own-Node-Py.rst:429
msgid "4.4 Build and run"
msgstr ""

#: ../../source/Tutorials/Advanced/Recording-A-Bag-From-Your-Own-Node-Py.rst:431
#: ../../source/Tutorials/Advanced/Recording-A-Bag-From-Your-Own-Node-Py.rst:589
msgid ""
"Navigate back to the root of your workspace, ``ros2_ws``, and build your "
"package."
msgstr ""

#: ../../source/Tutorials/Advanced/Recording-A-Bag-From-Your-Own-Node-Py.rst:475
msgid ""
"If the ``timed_synthetic_bag`` directory already exists, you must first "
"delete it before running the node."
msgstr ""

#: ../../source/Tutorials/Advanced/Recording-A-Bag-From-Your-Own-Node-Py.rst:483
msgid ""
"Wait for 30 seconds or so, then terminate the node with :kbd:`ctrl-c`. "
"Next, play back the created bag."
msgstr ""

#: ../../source/Tutorials/Advanced/Recording-A-Bag-From-Your-Own-Node-Py.rst:490
#: ../../source/Tutorials/Advanced/Recording-A-Bag-From-Your-Own-Node-Py.rst:649
msgid "Open a second terminal and echo the ``/synthetic`` topic."
msgstr ""

#: ../../source/Tutorials/Advanced/Recording-A-Bag-From-Your-Own-Node-Py.rst:496
msgid ""
"You will see the data that was generated and stored in the bag printed to"
" the console at a rate of one message per second."
msgstr ""

#: ../../source/Tutorials/Advanced/Recording-A-Bag-From-Your-Own-Node-Py.rst:499
msgid "5 Record synthetic data from an executable"
msgstr ""

#: ../../source/Tutorials/Advanced/Recording-A-Bag-From-Your-Own-Node-Py.rst:501
msgid ""
"Now that you can create a bag that stores data from a source other than a"
" topic, you will learn how to generate and record synthetic data from a "
"non-node executable. The advantage of this approach is simpler code and "
"rapid creation of a large quantity of data."
msgstr ""

#: ../../source/Tutorials/Advanced/Recording-A-Bag-From-Your-Own-Node-Py.rst:505
msgid "5.1 Write a Python executable"
msgstr ""

#: ../../source/Tutorials/Advanced/Recording-A-Bag-From-Your-Own-Node-Py.rst:507
msgid ""
"Inside the ``ros2_ws/src/bag_recorder_nodes_py/bag_recorder_nodes_py`` "
"directory, create a new file called ``data_generator_executable.py`` and "
"paste the following code into it."
msgstr ""

#: ../../source/Tutorials/Advanced/Recording-A-Bag-From-Your-Own-Node-Py.rst:548
msgid "5.2 Examine the code"
msgstr ""

#: ../../source/Tutorials/Advanced/Recording-A-Bag-From-Your-Own-Node-Py.rst:550
msgid ""
"A comparison of this sample and the previous sample will reveal that they"
" are not that different. The only significant difference is the use of a "
"for loop to drive the data generation rather than a timer."
msgstr ""

#: ../../source/Tutorials/Advanced/Recording-A-Bag-From-Your-Own-Node-Py.rst:553
msgid ""
"Notice that we are also now generating time stamps for the data rather "
"than relying on the current system time for each sample. The time stamp "
"can be any value you need it to be. The data will be played back at the "
"rate given by these time stamps, so this is a useful way to control the "
"default playback speed of the samples. Notice also that while the gap "
"between each sample is a full second in time, this executable does not "
"need to wait a second between each sample. This allows us to generate a "
"lot of data covering a wide span of time in much less time than playback "
"will take."
msgstr ""

#: ../../source/Tutorials/Advanced/Recording-A-Bag-From-Your-Own-Node-Py.rst:572
msgid "5.3 Add executable"
msgstr ""

#: ../../source/Tutorials/Advanced/Recording-A-Bag-From-Your-Own-Node-Py.rst:587
msgid "5.4 Build and run"
msgstr ""

#: ../../source/Tutorials/Advanced/Recording-A-Bag-From-Your-Own-Node-Py.rst:611
msgid "Open a terminal, navigate to ``ros2_ws``, and source the setup files."
msgstr ""

#: ../../source/Tutorials/Advanced/Recording-A-Bag-From-Your-Own-Node-Py.rst:633
msgid ""
"If the ``big_synthetic_bag`` directory already exists, you must first "
"delete it before running the executable."
msgstr ""

#: ../../source/Tutorials/Advanced/Recording-A-Bag-From-Your-Own-Node-Py.rst:635
msgid "Now run the executable:"
msgstr ""

#: ../../source/Tutorials/Advanced/Recording-A-Bag-From-Your-Own-Node-Py.rst:641
msgid "Note that the executable runs and finishes very quickly."
msgstr ""

#: ../../source/Tutorials/Advanced/Recording-A-Bag-From-Your-Own-Node-Py.rst:643
msgid "Now play back the created bag."
msgstr ""

#: ../../source/Tutorials/Advanced/Recording-A-Bag-From-Your-Own-Node-Py.rst:655
msgid ""
"You will see the data that was generated and stored in the bag printed to"
" the console at a rate of one message per second. Even though the bag was"
" generated rapidly it is still played back at the rate the time stamps "
"indicate."
msgstr ""

#: ../../source/Tutorials/Advanced/Recording-A-Bag-From-Your-Own-Node-Py.rst:659
msgid "Summary"
msgstr ""

#: ../../source/Tutorials/Advanced/Recording-A-Bag-From-Your-Own-Node-Py.rst:661
msgid ""
"You created a node that records data it receives on a topic into a bag. "
"You tested recording a bag using the node, and verified the data was "
"recorded by playing back the bag. This approach can be used to record a "
"bag with additional data than it received over a topic, for example with "
"results obtained from processing the received data. You then went on to "
"create a node and an executable to generate synthetic data and store it "
"in a bag. The latter approaches are useful especially for generating "
"synthetic data that can be used, for example, as training sets."
msgstr ""

