# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2023, Open Robotics
# This file is distributed under the same license as the ROS 2 documentation
# package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2023.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: ROS 2 documentation \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2023-12-08 06:20+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language: zh_CN\n"
"Language-Team: zh_CN <LL@li.org>\n"
"Plural-Forms: nplurals=1; plural=0;\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.12.1\n"

#: ../../source/Installation/Alternatives/Windows-Development-Setup.rst:6
msgid "Windows (source)"
msgstr ""

#: ../../source/Installation/Alternatives/Windows-Development-Setup.rst:10
msgid "Table of Contents"
msgstr ""

#: ../../source/Installation/Alternatives/Windows-Development-Setup.rst:12
msgid ""
"This guide is about how to setup a development environment for ROS 2 on "
"Windows."
msgstr ""

#: ../../source/Installation/Alternatives/Windows-Development-Setup.rst:15
msgid "System requirements"
msgstr ""

#: ../../source/Installation/Alternatives/Windows-Development-Setup.rst:17
msgid "Only Windows 10 is supported."
msgstr ""

#: ../../source/Installation/Alternatives/Windows-Development-Setup.rst:20
msgid "Language support"
msgstr ""

#: ../../source/Installation/Alternatives/Windows-Development-Setup.rst:22
msgid ""
"Make sure you have a locale which supports ``UTF-8``. For example, for a "
"Chinese-language Windows 10 installation, you may need to install an "
"`English language pack <https://support.microsoft.com/en-us/windows"
"/language-packs-for-windows-a5094319-a92d-18de-5b53-1cfc697cfca8>`_."
msgstr ""

#: ../../source/Installation/_Windows-Install-Prerequisites.rst:2
msgid "System setup"
msgstr ""

#: ../../source/Installation/_Windows-Install-Prerequisites.rst:5
msgid "Install Chocolatey"
msgstr ""

#: ../../source/Installation/_Windows-Install-Prerequisites.rst:7
msgid ""
"Chocolatey is a package manager for Windows, install it by following "
"their installation instructions:"
msgstr ""

#: ../../source/Installation/_Windows-Install-Prerequisites.rst:9
msgid "https://chocolatey.org/install"
msgstr ""

#: ../../source/Installation/_Windows-Install-Prerequisites.rst:11
msgid "You'll use Chocolatey to install some other developer tools."
msgstr ""

#: ../../source/Installation/_Windows-Install-Prerequisites.rst:14
msgid "Install Python"
msgstr ""

#: ../../source/Installation/_Windows-Install-Prerequisites.rst:16
msgid ""
"Open a Command Prompt and type the following to install Python via "
"Chocolatey:"
msgstr ""

#: ../../source/Installation/_Windows-Install-Prerequisites.rst:24
msgid ""
"Chocolatey will install Python in ``C:\\Python38``, and the rest of the "
"installation expects it to be there. If you've installed Python somewhere"
" else, you must copy or link it to that location."
msgstr ""

#: ../../source/Installation/_Windows-Install-Prerequisites.rst:28
msgid "Install Visual C++ Redistributables"
msgstr ""

#: ../../source/Installation/_Windows-Install-Prerequisites.rst:30
msgid ""
"Open a Command Prompt and type the following to install them via "
"Chocolatey:"
msgstr ""

#: ../../source/Installation/_Windows-Install-Prerequisites.rst:37
msgid "Install OpenSSL"
msgstr ""

#: ../../source/Installation/_Windows-Install-Prerequisites.rst:39
msgid ""
"Download the *Win64 OpenSSL v1.1.1n* OpenSSL installer from `this page "
"<https://slproweb.com/products/Win32OpenSSL.html>`__. Scroll to the "
"bottom of the page and download *Win64 OpenSSL v1.1.1t*. Don't download "
"the Win32 or Light versions, or the v3.X.Y installers."
msgstr ""

#: ../../source/Installation/_Windows-Install-Prerequisites.rst:43
msgid ""
"Run the installer with default parameters, as the following commands "
"assume you used the default installation directory."
msgstr ""

#: ../../source/Installation/_Windows-Install-Prerequisites.rst:45
msgid "This command sets an environment variable that persists over sessions:"
msgstr ""

#: ../../source/Installation/_Windows-Install-Prerequisites.rst:51
msgid ""
"You will need to append the OpenSSL-Win64 bin folder to your PATH. You "
"can do this by clicking the Windows icon, typing \"Environment "
"Variables\", then clicking on \"Edit the system environment variables\". "
"In the resulting dialog, click \"Environment Variables\", then click "
"\"Path\" on the bottom pane, finally click \"Edit\" and add the path "
"below."
msgstr ""

#: ../../source/Installation/_Windows-Install-Prerequisites.rst:55
msgid "``C:\\Program Files\\OpenSSL-Win64\\bin\\``"
msgstr ""

#: ../../source/Installation/_Windows-Install-Prerequisites.rst:58
msgid "Install Visual Studio"
msgstr ""

#: ../../source/Installation/_Windows-Install-Prerequisites.rst:60
msgid "Install Visual Studio 2019."
msgstr ""

#: ../../source/Installation/_Windows-Install-Prerequisites.rst:62
msgid ""
"If you already have a paid version of Visual Studio 2019 (Professional, "
"Enterprise), skip this step."
msgstr ""

#: ../../source/Installation/_Windows-Install-Prerequisites.rst:64
msgid ""
"Microsoft provides a free of charge version of Visual Studio 2019, named "
"Community, which can be used to build applications that use ROS 2. `You "
"can download the installer directly through this link. "
"<https://visualstudio.microsoft.com/thank-you-downloading-visual-"
"studio/?sku=Community&rel=16&src=myvs&utm_medium=microsoft&utm_source=my.visualstudio.com&utm_campaign=download&utm_content=vs+community+2019>`_"
msgstr ""

#: ../../source/Installation/_Windows-Install-Prerequisites.rst:67
msgid "Make sure that the Visual C++ features are installed."
msgstr ""

#: ../../source/Installation/_Windows-Install-Prerequisites.rst:69
msgid ""
"An easy way to make sure they're installed is to select the ``Desktop "
"development with C++`` workflow during the install."
msgstr ""

#: ../../source/Installation/_Windows-Install-Prerequisites.rst:73
msgid ""
"Make sure that no C++ CMake tools are installed by unselecting them in "
"the list of components to be installed."
msgstr ""

#: ../../source/Installation/_Windows-Install-Prerequisites.rst:76
msgid "Install OpenCV"
msgstr ""

#: ../../source/Installation/_Windows-Install-Prerequisites.rst:78
msgid "Some of the examples require OpenCV to be installed."
msgstr ""

#: ../../source/Installation/_Windows-Install-Prerequisites.rst:80
msgid ""
"You can download a precompiled version of OpenCV 3.4.6 from "
"https://github.com/ros2/ros2/releases/download/opencv-"
"archives/opencv-3.4.6-vc16.VS2019.zip ."
msgstr ""

#: ../../source/Installation/_Windows-Install-Prerequisites.rst:82
msgid ""
"Assuming you unpacked it to ``C:\\opencv``, type the following on a "
"Command Prompt (requires Admin privileges):"
msgstr ""

#: ../../source/Installation/_Windows-Install-Prerequisites.rst:88
msgid ""
"Since you are using a precompiled ROS version, we have to tell it where "
"to find the OpenCV libraries. You have to extend the ``PATH`` variable to"
" ``C:\\opencv\\x64\\vc16\\bin``."
msgstr ""

#: ../../source/Installation/_Windows-Install-Prerequisites.rst:92
msgid "Install dependencies"
msgstr ""

#: ../../source/Installation/_Windows-Install-Prerequisites.rst:94
msgid ""
"There are a few dependencies not available in the Chocolatey package "
"database. In order to ease the manual installation process, we provide "
"the necessary Chocolatey packages."
msgstr ""

#: ../../source/Installation/_Windows-Install-Prerequisites.rst:97
msgid "As some chocolatey packages rely on it, we start by installing CMake"
msgstr ""

#: ../../source/Installation/_Windows-Install-Prerequisites.rst:103
msgid ""
"You will need to append the CMake bin folder ``C:\\Program "
"Files\\CMake\\bin`` to your PATH."
msgstr ""

#: ../../source/Installation/_Windows-Install-Prerequisites.rst:105
msgid ""
"Please download these packages from `this <https://github.com/ros2/choco-"
"packages/releases/latest>`__ GitHub repository."
msgstr ""

#: ../../source/Installation/_Windows-Install-Prerequisites.rst:107
msgid "asio.1.12.1.nupkg"
msgstr ""

#: ../../source/Installation/_Windows-Install-Prerequisites.rst:108
msgid "bullet.3.17.nupkg"
msgstr ""

#: ../../source/Installation/_Windows-Install-Prerequisites.rst:109
msgid "cunit.2.1.3.nupkg"
msgstr ""

#: ../../source/Installation/_Windows-Install-Prerequisites.rst:110
msgid "eigen-3.3.4.nupkg"
msgstr ""

#: ../../source/Installation/_Windows-Install-Prerequisites.rst:111
msgid "tinyxml-usestl.2.6.2.nupkg"
msgstr ""

#: ../../source/Installation/_Windows-Install-Prerequisites.rst:112
msgid "tinyxml2.6.0.0.nupkg"
msgstr ""

#: ../../source/Installation/_Windows-Install-Prerequisites.rst:114
msgid ""
"Once these packages are downloaded, open an administrative shell and "
"execute the following command:"
msgstr ""

#: ../../source/Installation/_Windows-Install-Prerequisites.rst:120
msgid ""
"Please replace ``<PATH\\TO\\DOWNLOADS>`` with the folder you downloaded "
"the packages to."
msgstr ""

#: ../../source/Installation/_Windows-Install-Prerequisites.rst:122
msgid "First upgrade pip and setuptools:"
msgstr ""

#: ../../source/Installation/_Windows-Install-Prerequisites.rst:128
msgid "Now install some additional python dependencies:"
msgstr ""

#: ../../source/Installation/_Windows-Install-Prerequisites.rst:135
msgid "Install miscellaneous prerequisites"
msgstr ""

#: ../../source/Installation/_Windows-Install-Prerequisites.rst:137
msgid "Next install xmllint:"
msgstr ""

#: ../../source/Installation/_Windows-Install-Prerequisites.rst:139
msgid ""
"Download the `64 bit binary archives "
"<https://www.zlatkovic.com/pub/libxml/64bit/>`__ of ``libxml2`` (and its "
"dependencies ``iconv`` and ``zlib``) from "
"https://www.zlatkovic.com/projects/libxml/"
msgstr ""

#: ../../source/Installation/_Windows-Install-Prerequisites.rst:140
msgid "Unpack all archives into e.g. ``C:\\xmllint``"
msgstr ""

#: ../../source/Installation/_Windows-Install-Prerequisites.rst:141
msgid "Add ``C:\\xmllint\\bin`` to the ``PATH``."
msgstr ""

#: ../../source/Installation/_Windows-Install-Prerequisites.rst:144
msgid "Install Qt5"
msgstr ""

#: ../../source/Installation/_Windows-Install-Prerequisites.rst:146
msgid ""
"Download the `5.12.X offline installer <https://www.qt.io/offline-"
"installers>`_ from Qt's website. Run the installer. Make sure to select "
"the ``MSVC 2017 64-bit`` component under the ``Qt`` -> ``Qt 5.12.12`` "
"tree."
msgstr ""

#: ../../source/Installation/_Windows-Install-Prerequisites.rst:150
msgid ""
"Finally, in an administrator ``cmd.exe`` window set these environment "
"variables. The commands below assume you installed it to the default "
"location of ``C:\\Qt``."
msgstr ""

#: ../../source/Installation/_Windows-Install-Prerequisites.rst:161
msgid ""
"This path might change based on the installed MSVC version, the directory"
" Qt was installed to, and the version of Qt installed."
msgstr ""

#: ../../source/Installation/_Windows-Install-Prerequisites.rst:164
msgid "RQt dependencies"
msgstr ""

#: ../../source/Installation/_Windows-Install-Prerequisites.rst:166
msgid ""
"To run rqt_graph you need to `download "
"<https://graphviz.gitlab.io/_pages/Download/Download_windows.html>`__ and"
" install `Graphviz <https://graphviz.gitlab.io/>`__. The installer will "
"ask if to add graphviz to PATH, choose to either add it to the current "
"user or all users."
msgstr ""

#: ../../source/Installation/Alternatives/Windows-Development-Setup.rst:28
msgid "Install additional prerequisites from Chocolatey"
msgstr ""

#: ../../source/Installation/Alternatives/Windows-Development-Setup.rst:34
msgid ""
"You will need to append the Git cmd folder ``C:\\Program "
"Files\\Git\\cmd`` to the PATH (you can do this by clicking the Windows "
"icon, typing \"Environment Variables\", then clicking on \"Edit the "
"system environment variables\". In the resulting dialog, click "
"\"Environment Variables\", the click \"Path\" on the bottom pane, then "
"click \"Edit\" and add the path)."
msgstr ""

#: ../../source/Installation/Alternatives/Windows-Development-Setup.rst:38
msgid "Install Python prerequisites"
msgstr ""

#: ../../source/Installation/Alternatives/Windows-Development-Setup.rst:40
msgid "Install additional Python dependencies:"
msgstr ""

#: ../../source/Installation/Alternatives/Windows-Development-Setup.rst:47
msgid "Build ROS 2"
msgstr ""

#: ../../source/Installation/Alternatives/Windows-Development-Setup.rst:50
msgid "Get ROS 2 code"
msgstr ""

#: ../../source/Installation/Alternatives/Windows-Development-Setup.rst:52
msgid "Now that we have the development tools we can get the ROS 2 source code."
msgstr ""

#: ../../source/Installation/Alternatives/Windows-Development-Setup.rst:54
msgid "First setup a development folder, for example ``C:\\rolling``:"
msgstr ""

#: ../../source/Installation/Alternatives/Windows-Development-Setup.rst:58
msgid ""
"It is very important that the chosen path is short, due to the short "
"default Windows path limits (260 characters). To allow longer paths, see "
"https://learn.microsoft.com/en-us/windows/win32/fileio/maximum-file-path-"
"limitation?tabs=registry."
msgstr ""

#: ../../source/Installation/Alternatives/Windows-Development-Setup.rst:66
msgid "Get the ``ros2.repos`` file which defines the repositories to clone from:"
msgstr ""

#: ../../source/Installation/Alternatives/Windows-Development-Setup.rst:73
msgid "Install additional RMW implementations (optional)"
msgstr ""

#: ../../source/Installation/Alternatives/Windows-Development-Setup.rst:75
msgid ""
"The default middleware that ROS 2 uses is ``Fast DDS``, but the "
"middleware (RMW) can be replaced at build or runtime. See the :doc:`guide"
" <../../How-To-Guides/Working-with-multiple-RMW-implementations>` on how "
"to work with multiple RMWs."
msgstr ""

#: ../../source/Installation/Alternatives/Windows-Development-Setup.rst:79
msgid "Build the code in the workspace"
msgstr ""

#: ../../source/Installation/Alternatives/Windows-Development-Setup.rst:83
msgid ""
"To build ROS 2 you will need a Visual Studio Command Prompt (\"x64 Native"
" Tools Command Prompt for VS 2019\") running as Administrator."
msgstr ""

#: ../../source/Installation/Alternatives/Windows-Development-Setup.rst:85
msgid "To build the ``\\rolling`` folder tree:"
msgstr ""

#: ../../source/Installation/Alternatives/Windows-Development-Setup.rst:93
msgid ""
"We're using ``--merge-install`` here to avoid a ``PATH`` variable that is"
" too long at the end of the build. If you're adapting these instructions "
"to build a smaller workspace then you might be able to use the default "
"behavior which is isolated install, i.e. where each package is installed "
"to a different folder."
msgstr ""

#: ../../source/Installation/Alternatives/Windows-Development-Setup.rst:98
msgid ""
"If you are doing a debug build use ``python_d "
"path\\to\\colcon_executable`` ``colcon``. See `Extra stuff for debug "
"mode`_ for more info on running Python code in debug builds on Windows."
msgstr ""

#: ../../source/Installation/Alternatives/Windows-Development-Setup.rst:102
msgid "Setup environment"
msgstr ""

#: ../../source/Installation/Alternatives/Windows-Development-Setup.rst:104
msgid ""
"Start a command shell and source the ROS 2 setup file to set up the "
"workspace:"
msgstr ""

#: ../../source/Installation/Alternatives/Windows-Development-Setup.rst:110
msgid ""
"This will automatically set up the environment for any DDS vendors that "
"support was built for."
msgstr ""

#: ../../source/Installation/Alternatives/Windows-Development-Setup.rst:112
msgid ""
"It is normal that the previous command, if nothing else went wrong, "
"outputs \"The system cannot find the path specified.\" exactly once."
msgstr ""

#: ../../source/Installation/Alternatives/Windows-Development-Setup.rst:115
msgid "Try some examples"
msgstr ""

#: ../../source/Installation/Alternatives/Windows-Development-Setup.rst:117
msgid ""
"Note that the first time you run any executable you will have to allow "
"access to the network through a Windows Firewall popup."
msgstr ""

#: ../../source/Installation/Alternatives/Windows-Development-Setup.rst:119
msgid "You can run the tests using this command:"
msgstr ""

#: ../../source/Installation/Alternatives/Windows-Development-Setup.rst:127
msgid ""
"``--merge-install`` should only be used if it was also used in the build "
"step."
msgstr ""

#: ../../source/Installation/Alternatives/Windows-Development-Setup.rst:129
msgid "Afterwards you can get a summary of the tests using this command:"
msgstr ""

#: ../../source/Installation/Alternatives/Windows-Development-Setup.rst:135
msgid ""
"To run the examples, first open a clean new ``cmd.exe`` and set up the "
"workspace by sourcing the ``local_setup.bat`` file. Then, run a C++ "
"``talker``\\ :"
msgstr ""

#: ../../source/Installation/Alternatives/Windows-Development-Setup.rst:143
msgid ""
"In a separate shell you can do the same, but instead run a Python "
"``listener``\\ :"
msgstr ""

#: ../../source/Installation/Alternatives/Windows-Development-Setup.rst:150
msgid ""
"You should see the ``talker`` saying that it's ``Publishing`` messages "
"and the ``listener`` saying ``I heard`` those messages. This verifies "
"both the C++ and Python APIs are working properly. Hooray!"
msgstr ""

#: ../../source/Installation/Alternatives/Windows-Development-Setup.rst:156
msgid ""
"It is not recommended to build in the same cmd prompt that you've sourced"
" the ``local_setup.bat``."
msgstr ""

#: ../../source/Installation/Alternatives/Windows-Development-Setup.rst:159
msgid "Next steps"
msgstr ""

#: ../../source/Installation/Alternatives/Windows-Development-Setup.rst:161
msgid ""
"Continue with the :doc:`tutorials and demos <../../Tutorials>` to "
"configure your environment, create your own workspace and packages, and "
"learn ROS 2 core concepts."
msgstr ""

#: ../../source/Installation/Alternatives/Windows-Development-Setup.rst:164
msgid "Extra stuff for Debug mode"
msgstr ""

#: ../../source/Installation/Alternatives/Windows-Development-Setup.rst:166
msgid ""
"If you want to be able to run all the tests in Debug mode, you'll need to"
" install a few more things:"
msgstr ""

#: ../../source/Installation/Alternatives/Windows-Development-Setup.rst:168
msgid "To be able to extract the Python source tarball, you can use PeaZip:"
msgstr ""

#: ../../source/Installation/Alternatives/Windows-Development-Setup.rst:174
msgid ""
"You'll also need SVN, since some of the Python source-build dependencies "
"are checked out via SVN:"
msgstr ""

#: ../../source/Installation/Alternatives/Windows-Development-Setup.rst:180
msgid ""
"You'll need to quit and restart the command prompt after installing the "
"above."
msgstr ""

#: ../../source/Installation/Alternatives/Windows-Development-Setup.rst:181
msgid "Get and extract the Python 3.8.3 source from the ``tgz``:"
msgstr ""

#: ../../source/Installation/Alternatives/Windows-Development-Setup.rst:183
msgid "https://www.python.org/ftp/python/3.8.3/Python-3.8.3.tgz"
msgstr ""

#: ../../source/Installation/Alternatives/Windows-Development-Setup.rst:184
msgid ""
"To keep these instructions concise, please extract it to "
"``C:\\dev\\Python-3.8.3``"
msgstr ""

#: ../../source/Installation/Alternatives/Windows-Development-Setup.rst:186
msgid ""
"Now, build the Python source in debug mode from a Visual Studio command "
"prompt:"
msgstr ""

#: ../../source/Installation/Alternatives/Windows-Development-Setup.rst:194
msgid ""
"Finally, copy the build products into the Python38 installation "
"directories, next to the Release-mode Python executable and DLL's:"
msgstr ""

#: ../../source/Installation/Alternatives/Windows-Development-Setup.rst:207
msgid "Now, from a fresh command prompt, make sure that ``python_d`` works:"
msgstr ""

#: ../../source/Installation/Alternatives/Windows-Development-Setup.rst:213
msgid ""
"Once you have verified the operation of ``python_d``, it is necessary to "
"reinstall a few dependencies with the debug-enabled libraries:"
msgstr ""

#: ../../source/Installation/Alternatives/Windows-Development-Setup.rst:220
msgid "To verify the installation of these dependencies:"
msgstr ""

#: ../../source/Installation/Alternatives/Windows-Development-Setup.rst:226
msgid ""
"When you wish to return to building release binaries, it is necessary to "
"uninstall the debug variants and use the release variants:"
msgstr ""

#: ../../source/Installation/Alternatives/Windows-Development-Setup.rst:233
msgid ""
"To create executables python scripts(.exe), python_d should be used to "
"invoke colcon"
msgstr ""

#: ../../source/Installation/Alternatives/Windows-Development-Setup.rst:239
msgid "Hooray, you're done!"
msgstr ""

#: ../../source/Installation/Alternatives/Windows-Development-Setup.rst:242
msgid "Stay up to date"
msgstr ""

#: ../../source/Installation/Alternatives/Windows-Development-Setup.rst:244
msgid ""
"See :doc:`../Maintaining-a-Source-Checkout` to periodically refresh your "
"source installation."
msgstr ""

#: ../../source/Installation/Alternatives/Windows-Development-Setup.rst:247
msgid "Troubleshoot"
msgstr ""

#: ../../source/Installation/Alternatives/Windows-Development-Setup.rst:249
msgid ""
"Troubleshooting techniques can be found :ref:`here <windows-"
"troubleshooting>`."
msgstr ""

#: ../../source/Installation/Alternatives/Windows-Development-Setup.rst:252
msgid "Uninstall"
msgstr ""

#: ../../source/Installation/Alternatives/Windows-Development-Setup.rst:254
msgid ""
"If you installed your workspace with colcon as instructed above, "
"\"uninstalling\" could be just a matter of opening a new terminal and not"
" sourcing the workspace's ``setup`` file. This way, your environment will"
" behave as though there is no Rolling install on your system."
msgstr ""

#: ../../source/Installation/Alternatives/Windows-Development-Setup.rst:257
msgid ""
"If you're also trying to free up space, you can delete the entire "
"workspace directory with:"
msgstr ""

