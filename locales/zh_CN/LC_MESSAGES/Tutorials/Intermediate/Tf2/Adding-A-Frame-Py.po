# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2023, Open Robotics
# This file is distributed under the same license as the ROS 2 documentation
# package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2023.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: ROS 2 documentation \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2023-12-08 06:20+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language: zh_CN\n"
"Language-Team: zh_CN <LL@li.org>\n"
"Plural-Forms: nplurals=1; plural=0;\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.12.1\n"

#: ../../source/Tutorials/Intermediate/Tf2/Adding-A-Frame-Py.rst:8
msgid "Adding a frame (Python)"
msgstr ""

#: ../../source/Tutorials/Intermediate/Tf2/Adding-A-Frame-Py.rst:10
msgid "**Goal:** Learn how to to add an extra frame to tf2."
msgstr ""

#: ../../source/Tutorials/Intermediate/Tf2/Adding-A-Frame-Py.rst:12
msgid "**Tutorial level:** Intermediate"
msgstr ""

#: ../../source/Tutorials/Intermediate/Tf2/Adding-A-Frame-Py.rst:14
msgid "**Time:** 15 minutes"
msgstr ""

#: ../../source/Tutorials/Intermediate/Tf2/Adding-A-Frame-Py.rst:18
msgid "Contents"
msgstr ""

#: ../../source/Tutorials/Intermediate/Tf2/Adding-A-Frame-Py.rst:21
msgid "Background"
msgstr ""

#: ../../source/Tutorials/Intermediate/Tf2/Adding-A-Frame-Py.rst:23
msgid ""
"In previous tutorials, we recreated the turtle demo by writing a "
":doc:`tf2 broadcaster <./Writing-A-Tf2-Broadcaster-Py>` and a :doc:`tf2 "
"listener <./Writing-A-Tf2-Listener-Py>`. This tutorial will teach you how"
" to add extra fixed and dynamic frames to the transformation tree. In "
"fact, adding a frame in tf2 is very similar to creating the tf2 "
"broadcaster, but this example will show you some additional features of "
"tf2."
msgstr ""

#: ../../source/Tutorials/Intermediate/Tf2/Adding-A-Frame-Py.rst:27
msgid ""
"For many tasks related to transformations, it is easier to think inside a"
" local frame. For example, it is easiest to reason about laser scan "
"measurements in a frame at the center of the laser scanner. tf2 allows "
"you to define a local frame for each sensor, link, or joint in your "
"system. When transforming from one frame to another, tf2 will take care "
"of all the hidden intermediate frame transformations that are introduced."
msgstr ""

#: ../../source/Tutorials/Intermediate/Tf2/Adding-A-Frame-Py.rst:33
msgid "tf2 tree"
msgstr ""

#: ../../source/Tutorials/Intermediate/Tf2/Adding-A-Frame-Py.rst:35
msgid ""
"tf2 builds up a tree structure of frames and, thus, does not allow a "
"closed loop in the frame structure. This means that a frame only has one "
"single parent, but it can have multiple children. Currently, our tf2 tree"
" contains three frames: ``world``, ``turtle1`` and ``turtle2``. The two "
"turtle frames are children of the ``world`` frame. If we want to add a "
"new frame to tf2, one of the three existing frames needs to be the parent"
" frame, and the new one will become its child frame."
msgstr ""

#: ../../source/Tutorials/Intermediate/Tf2/Adding-A-Frame-Py.rst:44
msgid "Tasks"
msgstr ""

#: ../../source/Tutorials/Intermediate/Tf2/Adding-A-Frame-Py.rst:47
msgid "1 Write the fixed frame broadcaster"
msgstr ""

#: ../../source/Tutorials/Intermediate/Tf2/Adding-A-Frame-Py.rst:49
msgid ""
"In our turtle example, we'll add a new frame ``carrot1``, which will be "
"the child of the ``turtle1``. This frame will serve as the goal for the "
"second turtle."
msgstr ""

#: ../../source/Tutorials/Intermediate/Tf2/Adding-A-Frame-Py.rst:52
msgid ""
"Let's first create the source files. Go to the ``learning_tf2_py`` "
"package we created in the previous tutorials. Inside the "
"``src/learning_tf2_py/learning_tf2_py`` directory download the fixed "
"frame broadcaster code by entering the following command:"
msgstr ""

#: ../../source/Tutorials/Intermediate/Tf2/Adding-A-Frame-Py.rst:58
#: ../../source/Tutorials/Intermediate/Tf2/Adding-A-Frame-Py.rst:217
#: ../../source/Tutorials/Intermediate/Tf2/Adding-A-Frame-Py.rst:235
#: ../../source/Tutorials/Intermediate/Tf2/Adding-A-Frame-Py.rst:257
#: ../../source/Tutorials/Intermediate/Tf2/Adding-A-Frame-Py.rst:329
#: ../../source/Tutorials/Intermediate/Tf2/Adding-A-Frame-Py.rst:471
#: ../../source/Tutorials/Intermediate/Tf2/Adding-A-Frame-Py.rst:489
#: ../../source/Tutorials/Intermediate/Tf2/Adding-A-Frame-Py.rst:511
msgid "Linux"
msgstr ""

#: ../../source/Tutorials/Intermediate/Tf2/Adding-A-Frame-Py.rst:64
#: ../../source/Tutorials/Intermediate/Tf2/Adding-A-Frame-Py.rst:223
#: ../../source/Tutorials/Intermediate/Tf2/Adding-A-Frame-Py.rst:241
#: ../../source/Tutorials/Intermediate/Tf2/Adding-A-Frame-Py.rst:263
#: ../../source/Tutorials/Intermediate/Tf2/Adding-A-Frame-Py.rst:335
#: ../../source/Tutorials/Intermediate/Tf2/Adding-A-Frame-Py.rst:477
#: ../../source/Tutorials/Intermediate/Tf2/Adding-A-Frame-Py.rst:495
#: ../../source/Tutorials/Intermediate/Tf2/Adding-A-Frame-Py.rst:517
msgid "macOS"
msgstr ""

#: ../../source/Tutorials/Intermediate/Tf2/Adding-A-Frame-Py.rst:70
#: ../../source/Tutorials/Intermediate/Tf2/Adding-A-Frame-Py.rst:227
#: ../../source/Tutorials/Intermediate/Tf2/Adding-A-Frame-Py.rst:247
#: ../../source/Tutorials/Intermediate/Tf2/Adding-A-Frame-Py.rst:269
#: ../../source/Tutorials/Intermediate/Tf2/Adding-A-Frame-Py.rst:341
#: ../../source/Tutorials/Intermediate/Tf2/Adding-A-Frame-Py.rst:481
#: ../../source/Tutorials/Intermediate/Tf2/Adding-A-Frame-Py.rst:501
#: ../../source/Tutorials/Intermediate/Tf2/Adding-A-Frame-Py.rst:523
msgid "Windows"
msgstr ""

#: ../../source/Tutorials/Intermediate/Tf2/Adding-A-Frame-Py.rst:72
#: ../../source/Tutorials/Intermediate/Tf2/Adding-A-Frame-Py.rst:343
msgid "In a Windows command line prompt:"
msgstr ""

#: ../../source/Tutorials/Intermediate/Tf2/Adding-A-Frame-Py.rst:78
#: ../../source/Tutorials/Intermediate/Tf2/Adding-A-Frame-Py.rst:349
msgid "Or in powershell:"
msgstr ""

#: ../../source/Tutorials/Intermediate/Tf2/Adding-A-Frame-Py.rst:84
msgid "Now open the file called ``fixed_frame_tf2_broadcaster.py``."
msgstr ""

#: ../../source/Tutorials/Intermediate/Tf2/Adding-A-Frame-Py.rst:130
msgid ""
"The code is very similar to the tf2 broadcaster tutorial example and the "
"only difference is that the transform here does not change over time."
msgstr ""

#: ../../source/Tutorials/Intermediate/Tf2/Adding-A-Frame-Py.rst:133
msgid "1.1 Examine the code"
msgstr ""

#: ../../source/Tutorials/Intermediate/Tf2/Adding-A-Frame-Py.rst:135
msgid ""
"Let's take a look at the key lines in this piece of code. Here we create "
"a new transform, from the parent ``turtle1`` to the new child "
"``carrot1``. The ``carrot1`` frame is 2 meters offset in y axis in terms "
"of the ``turtle1`` frame."
msgstr ""

#: ../../source/Tutorials/Intermediate/Tf2/Adding-A-Frame-Py.rst:151
msgid "1.2 Add an entry point"
msgstr ""

#: ../../source/Tutorials/Intermediate/Tf2/Adding-A-Frame-Py.rst:153
#: ../../source/Tutorials/Intermediate/Tf2/Adding-A-Frame-Py.rst:421
msgid ""
"To allow the ``ros2 run`` command to run your node, you must add the "
"entry point to ``setup.py`` (located in the ``src/learning_tf2_py`` "
"directory)."
msgstr ""

#: ../../source/Tutorials/Intermediate/Tf2/Adding-A-Frame-Py.rst:155
#: ../../source/Tutorials/Intermediate/Tf2/Adding-A-Frame-Py.rst:423
msgid "Add the following line between the ``'console_scripts':`` brackets:"
msgstr ""

#: ../../source/Tutorials/Intermediate/Tf2/Adding-A-Frame-Py.rst:162
msgid "1.3 Write the launch file"
msgstr ""

#: ../../source/Tutorials/Intermediate/Tf2/Adding-A-Frame-Py.rst:164
msgid ""
"Now let's create a launch file for this example. With your text editor, "
"create a new file called "
"``launch/turtle_tf2_fixed_frame_demo_launch.py``, and add the following "
"lines:"
msgstr ""

#: ../../source/Tutorials/Intermediate/Tf2/Adding-A-Frame-Py.rst:197
msgid ""
"This launch file imports the required packages and then creates a "
"``demo_nodes`` variable that will store nodes that we created in the "
"previous tutorial's launch file."
msgstr ""

#: ../../source/Tutorials/Intermediate/Tf2/Adding-A-Frame-Py.rst:199
msgid ""
"The last part of the code will add our fixed ``carrot1`` frame to the "
"turtlesim world using our ``fixed_frame_tf2_broadcaster`` node."
msgstr ""

#: ../../source/Tutorials/Intermediate/Tf2/Adding-A-Frame-Py.rst:211
msgid "1.4 Build"
msgstr ""

#: ../../source/Tutorials/Intermediate/Tf2/Adding-A-Frame-Py.rst:213
#: ../../source/Tutorials/Intermediate/Tf2/Adding-A-Frame-Py.rst:467
msgid ""
"Run ``rosdep`` in the root of your workspace to check for missing "
"dependencies."
msgstr ""

#: ../../source/Tutorials/Intermediate/Tf2/Adding-A-Frame-Py.rst:225
#: ../../source/Tutorials/Intermediate/Tf2/Adding-A-Frame-Py.rst:229
#: ../../source/Tutorials/Intermediate/Tf2/Adding-A-Frame-Py.rst:479
#: ../../source/Tutorials/Intermediate/Tf2/Adding-A-Frame-Py.rst:483
msgid ""
"rosdep only runs on Linux, so you will need to install ``geometry_msgs`` "
"and ``turtlesim`` dependencies yourself"
msgstr ""

#: ../../source/Tutorials/Intermediate/Tf2/Adding-A-Frame-Py.rst:231
#: ../../source/Tutorials/Intermediate/Tf2/Adding-A-Frame-Py.rst:485
msgid "Still in the root of your workspace, build your package:"
msgstr ""

#: ../../source/Tutorials/Intermediate/Tf2/Adding-A-Frame-Py.rst:253
#: ../../source/Tutorials/Intermediate/Tf2/Adding-A-Frame-Py.rst:507
msgid ""
"Open a new terminal, navigate to the root of your workspace, and source "
"the setup files:"
msgstr ""

#: ../../source/Tutorials/Intermediate/Tf2/Adding-A-Frame-Py.rst:280
#: ../../source/Tutorials/Intermediate/Tf2/Adding-A-Frame-Py.rst:534
msgid "1.5 Run"
msgstr ""

#: ../../source/Tutorials/Intermediate/Tf2/Adding-A-Frame-Py.rst:282
#: ../../source/Tutorials/Intermediate/Tf2/Adding-A-Frame-Py.rst:536
msgid "Now you are ready to run the launch file:"
msgstr ""

#: ../../source/Tutorials/Intermediate/Tf2/Adding-A-Frame-Py.rst:288
msgid ""
"You should notice that the new ``carrot1`` frame appeared in the "
"transformation tree."
msgstr ""

#: ../../source/Tutorials/Intermediate/Tf2/Adding-A-Frame-Py.rst:292
msgid ""
"If you drive the first turtle around, you should notice that the behavior"
" didn't change from the previous tutorial, even though we added a new "
"frame. That's because adding an extra frame does not affect the other "
"frames and our listener is still using the previously defined frames."
msgstr ""

#: ../../source/Tutorials/Intermediate/Tf2/Adding-A-Frame-Py.rst:295
msgid ""
"Therefore if we want our second turtle to follow the carrot instead of "
"the first turtle, we need to change value of the ``target_frame``. This "
"can be done two ways. One way is to pass the ``target_frame`` argument to"
" the launch file directly from the console:"
msgstr ""

#: ../../source/Tutorials/Intermediate/Tf2/Adding-A-Frame-Py.rst:303
msgid ""
"The second way is to update the launch file. To do so, open the "
"``turtle_tf2_fixed_frame_demo_launch.py`` file, and add the "
"``'target_frame': 'carrot1'`` parameter via ``launch_arguments`` "
"argument."
msgstr ""

#: ../../source/Tutorials/Intermediate/Tf2/Adding-A-Frame-Py.rst:314
msgid ""
"Now just rebuild the package, restart the "
"``turtle_tf2_fixed_frame_demo_launch.py``, and you'll see the second "
"turtle following the carrot instead of the first turtle!"
msgstr ""

#: ../../source/Tutorials/Intermediate/Tf2/Adding-A-Frame-Py.rst:319
msgid "2 Write the dynamic frame broadcaster"
msgstr ""

#: ../../source/Tutorials/Intermediate/Tf2/Adding-A-Frame-Py.rst:321
msgid ""
"The extra frame we published in this tutorial is a fixed frame that "
"doesn't change over time in relation to the parent frame. However, if you"
" want to publish a moving frame you can code the broadcaster to change "
"the frame over time. Let's change our ``carrot1`` frame so that it "
"changes relative to ``turtle1`` frame over time. Go to the "
"``learning_tf2_py`` package we created in the previous tutorial. Inside "
"the ``src/learning_tf2_py/learning_tf2_py`` directory download the "
"dynamic frame broadcaster code by entering the following command:"
msgstr ""

#: ../../source/Tutorials/Intermediate/Tf2/Adding-A-Frame-Py.rst:355
msgid "Now open the file called ``dynamic_frame_tf2_broadcaster.py``:"
msgstr ""

#: ../../source/Tutorials/Intermediate/Tf2/Adding-A-Frame-Py.rst:406
msgid "2.1 Examine the code"
msgstr ""

#: ../../source/Tutorials/Intermediate/Tf2/Adding-A-Frame-Py.rst:408
msgid ""
"Instead of a fixed definition of our x and y offsets, we are using the "
"``sin()`` and ``cos()`` functions on the current time so that the offset "
"of ``carrot1`` is constantly changing."
msgstr ""

#: ../../source/Tutorials/Intermediate/Tf2/Adding-A-Frame-Py.rst:419
msgid "2.2 Add an entry point"
msgstr ""

#: ../../source/Tutorials/Intermediate/Tf2/Adding-A-Frame-Py.rst:430
msgid "2.3 Write the launch file"
msgstr ""

#: ../../source/Tutorials/Intermediate/Tf2/Adding-A-Frame-Py.rst:432
msgid ""
"To test this code, create a new launch file "
"``launch/turtle_tf2_dynamic_frame_demo_launch.py`` and paste the "
"following code:"
msgstr ""

#: ../../source/Tutorials/Intermediate/Tf2/Adding-A-Frame-Py.rst:465
msgid "2.4 Build"
msgstr ""

#: ../../source/Tutorials/Intermediate/Tf2/Adding-A-Frame-Py.rst:542
msgid ""
"You should see that the second turtle is following the carrot's position "
"that is constantly changing."
msgstr ""

#: ../../source/Tutorials/Intermediate/Tf2/Adding-A-Frame-Py.rst:547
msgid "Summary"
msgstr ""

#: ../../source/Tutorials/Intermediate/Tf2/Adding-A-Frame-Py.rst:549
msgid ""
"In this tutorial, you learned about the tf2 transformation tree, its "
"structure, and its features. You also learned that it is easiest to think"
" inside a local frame, and learned to add extra fixed and dynamic frames "
"for that local frame."
msgstr ""

