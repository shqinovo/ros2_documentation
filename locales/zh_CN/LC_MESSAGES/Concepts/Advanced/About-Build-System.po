# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2023, Open Robotics
# This file is distributed under the same license as the ROS 2 documentation
# package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2023.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: ROS 2 documentation \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2023-12-08 06:20+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language: zh_CN\n"
"Language-Team: zh_CN <LL@li.org>\n"
"Plural-Forms: nplurals=1; plural=0;\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.12.1\n"

#: ../../source/Concepts/Advanced/About-Build-System.rst:6
msgid "The build system"
msgstr ""

#: ../../source/Concepts/Advanced/About-Build-System.rst:9
msgid "Table of Contents"
msgstr ""

#: ../../source/Concepts/Advanced/About-Build-System.rst:13
msgid ""
"The build system is what allows developers to build their ROS 2 code as "
"needed. ROS 2 relies heavily on the division of code into packages, with "
"each package containing a manifest file (``package.xml``). This manifest "
"file contains essential metadata about the package, including its "
"dependencies on other packages. This manifest is required for the meta-"
"build tool to function."
msgstr ""

#: ../../source/Concepts/Advanced/About-Build-System.rst:18
msgid "The ROS 2 build system consists of 3 major concepts."
msgstr ""

#: ../../source/Concepts/Advanced/About-Build-System.rst:21
msgid "Build tool"
msgstr ""

#: ../../source/Concepts/Advanced/About-Build-System.rst:23
msgid ""
"This is the software that controls the compilation and testing of a "
"single package. In ROS 2 this is usually CMake for C++, and setuptools "
"for Python, but other build tools are supported."
msgstr ""

#: ../../source/Concepts/Advanced/About-Build-System.rst:27
msgid "Build helpers"
msgstr ""

#: ../../source/Concepts/Advanced/About-Build-System.rst:29
msgid ""
"These are helper functions that hook into the build tool to developer "
"experience. ROS 2 packages typically rely on the ``ament`` series of "
"packages for this. ``ament`` consists of a few important repositories "
"which are all in the `GitHub organization <https://github.com/ament>`_."
msgstr ""

#: ../../source/Concepts/Advanced/About-Build-System.rst:34
msgid "The ``ament_package`` package"
msgstr ""

#: ../../source/Concepts/Advanced/About-Build-System.rst:36
msgid ""
"Located on |GitHub|_ at `ament/ament_package "
"<https://github.com/ament/ament_package>`_, this repository contains a "
"single :term:`ament Python package` that provides various utilities for "
"|ament packages|, e.g. templates for environment hooks."
msgstr ""

#: ../../source/Concepts/Advanced/About-Build-System.rst:38
msgid ""
"All |ament packages| must contain a single :term:`package.xml` file at "
"the root of the package regardless of their underlying build system. The "
":term:`package.xml` \"manifest\" file contains information that is "
"required in order to process and operate on a |package|. This |package| "
"information includes things like the |package|'s name, which is globally "
"unique, and the package's dependencies. The :term:`package.xml` file also"
" serves as the marker file which indicates the location of the |package| "
"on the file system."
msgstr ""

#: ../../source/Concepts/Advanced/About-Build-System.rst:43
msgid ""
"Parsing of the :term:`package.xml` files is provided by ``catkin_pkg`` "
"(as in ROS 1), while functionality to locate |packages| by searching the "
"file system for these :term:`package.xml` files is provided by build "
"tools such as ``colcon``."
msgstr ""

#: ../../source/Concepts/Advanced/About-Build-System.rst:46
msgid "package.xml"
msgstr ""

#: ../../source/Concepts/Advanced/About-Build-System.rst:48
msgid ""
"Package manifest file which marks the root of a :term:`package` and "
"contains meta information about the :term:`package` including its name, "
"version, description, maintainer, license, dependencies, and more. The "
"contents of the manifest are in machine readable XML format and the "
"contents are described in the |REPs| `127 "
"<http://www.ros.org/reps/rep-0127.html>`_ and `140 "
"<http://www.ros.org/reps/rep-0140.html>`_, with the possibility of "
"further modifications in future |REPs|."
msgstr ""

#: ../../source/Concepts/Advanced/About-Build-System.rst:51
msgid ""
"So anytime some |package| is referred to as an :term:`ament package`, it "
"means that it is a single unit of software (source code, build files, "
"tests, documentation, and other resources) which is described using a "
":term:`package.xml` manifest file."
msgstr ""

#: ../../source/Concepts/Advanced/About-Build-System.rst:54
msgid "ament package"
msgstr ""

#: ../../source/Concepts/Advanced/About-Build-System.rst:56
msgid ""
"Any |package| which contains a :term:`package.xml` and follows the "
"packaging guidelines of ``ament``, regardless of the underlying build "
"system."
msgstr ""

#: ../../source/Concepts/Advanced/About-Build-System.rst:58
msgid ""
"Since the term :term:`ament package` is build system agnostic, there can "
"be different kinds of |ament packages|, e.g. :term:`ament CMake package`,"
" :term:`ament Python package`, etc."
msgstr ""

#: ../../source/Concepts/Advanced/About-Build-System.rst:60
msgid ""
"Here is a list of common package types that you might run into in this "
"software stack:"
msgstr ""

#: ../../source/Concepts/Advanced/About-Build-System.rst:63
msgid "CMake package"
msgstr ""

#: ../../source/Concepts/Advanced/About-Build-System.rst:65
msgid ""
"Any |package| containing a plain CMake project and a :term:`package.xml` "
"manifest file."
msgstr ""

#: ../../source/Concepts/Advanced/About-Build-System.rst:66
msgid "ament CMake package"
msgstr ""

#: ../../source/Concepts/Advanced/About-Build-System.rst:68
msgid ""
"A :term:`CMake package` that also follows the ``ament`` packaging "
"guidelines."
msgstr ""

#: ../../source/Concepts/Advanced/About-Build-System.rst:69
msgid "Python package"
msgstr ""

#: ../../source/Concepts/Advanced/About-Build-System.rst:71
msgid ""
"Any |package| containing a `setuptools "
"<https://pypi.org/project/setuptools/>`_ based Python project and a "
":term:`package.xml` manifest file."
msgstr ""

#: ../../source/Concepts/Advanced/About-Build-System.rst:72
msgid "ament Python package"
msgstr ""

#: ../../source/Concepts/Advanced/About-Build-System.rst:74
msgid ""
"A :term:`Python package` that also follows the ``ament`` packaging "
"guidelines."
msgstr ""

#: ../../source/Concepts/Advanced/About-Build-System.rst:77
msgid "The ``ament_cmake`` repository"
msgstr ""

#: ../../source/Concepts/Advanced/About-Build-System.rst:79
msgid ""
"Located on |GitHub|_ at `ament/ament_cmake "
"<https://github.com/ament/ament_cmake>`_, this repository contains many "
"\"ament CMake\" and pure CMake packages which provide the infrastructure "
"in CMake that is required to create \"ament CMake\" packages. In this "
"context \"ament CMake\" packages means: ``ament`` packages that are built"
" using CMake. So the |packages| in this repository provide the necessary "
"CMake functions/macros and CMake Modules to facilitate creating more "
"\"ament CMake\" (or ``ament_cmake``) packages. Packages of this type are "
"identified with the ``<build_type>ament_cmake</build_type>`` tag in the "
"``<export>`` tag of the :term:`package.xml` file."
msgstr ""

#: ../../source/Concepts/Advanced/About-Build-System.rst:84
msgid ""
"The |packages| in this repository are extremely modular, but there is a "
"single \"bottleneck\" |package| called ``ament_cmake``. Anyone can depend"
" on the ``ament_cmake`` |package| to get all of the aggregate "
"functionality of the |packages| in this repository. Here a list of the "
"|packages| in the repository along with a short description:"
msgstr ""

#: ../../source/Concepts/Advanced/About-Build-System.rst:88
msgid "``ament_cmake``"
msgstr ""

#: ../../source/Concepts/Advanced/About-Build-System.rst:90
msgid ""
"aggregates all other |packages| in this repository, users need only to "
"depend on this"
msgstr ""

#: ../../source/Concepts/Advanced/About-Build-System.rst:92
msgid "``ament_cmake_auto``"
msgstr ""

#: ../../source/Concepts/Advanced/About-Build-System.rst:94
msgid ""
"provides convenience CMake functions which automatically handle a lot of "
"the tedious parts of writing a |package|'s ``CMakeLists.txt`` file"
msgstr ""

#: ../../source/Concepts/Advanced/About-Build-System.rst:96
msgid "``ament_cmake_core``"
msgstr ""

#: ../../source/Concepts/Advanced/About-Build-System.rst:98
msgid ""
"provides all built-in core concepts for ``ament``, e.g. environment "
"hooks, resource indexing, symbolic linking install and others"
msgstr ""

#: ../../source/Concepts/Advanced/About-Build-System.rst:100
msgid "``ament_cmake_gmock``"
msgstr ""

#: ../../source/Concepts/Advanced/About-Build-System.rst:102
msgid "adds convenience functions for making gmock based unit tests"
msgstr ""

#: ../../source/Concepts/Advanced/About-Build-System.rst:104
msgid "``ament_cmake_gtest``"
msgstr ""

#: ../../source/Concepts/Advanced/About-Build-System.rst:106
msgid "adds convenience functions for making gtest based automated tests"
msgstr ""

#: ../../source/Concepts/Advanced/About-Build-System.rst:108
msgid "``ament_cmake_nose``"
msgstr ""

#: ../../source/Concepts/Advanced/About-Build-System.rst:110
msgid ""
"adds convenience functions for making nosetests based python automated "
"tests"
msgstr ""

#: ../../source/Concepts/Advanced/About-Build-System.rst:112
msgid "``ament_cmake_python``"
msgstr ""

#: ../../source/Concepts/Advanced/About-Build-System.rst:114
msgid "provides CMake functions for |packages| that contain Python code"
msgstr ""

#: ../../source/Concepts/Advanced/About-Build-System.rst:115
msgid ""
"see the :doc:`ament_cmake_python user documentation <../../How-To-Guides"
"/Ament-CMake-Python-Documentation>`"
msgstr ""

#: ../../source/Concepts/Advanced/About-Build-System.rst:117
msgid "``ament_cmake_test``"
msgstr ""

#: ../../source/Concepts/Advanced/About-Build-System.rst:119
msgid ""
"aggregates different kinds of tests, e.g. gtest and nosetests, under a "
"single target using `CTest "
"<https://cmake.org/Wiki/CMake/Testing_With_CTest>`_"
msgstr ""

#: ../../source/Concepts/Advanced/About-Build-System.rst:121
msgid ""
"The ``ament_cmake_core`` |package| contains a lot of the CMake "
"infrastructure that makes it possible to cleanly pass information between"
" |packages| using conventional interfaces. This makes the |packages| have"
" more decoupled build interfaces with other |packages|, promoting their "
"reuse and encouraging conventions in the build systems of different "
"|packages|. For instance, it provides a standard way to pass include "
"directories, libraries, definitions, and dependencies between |packages| "
"so that consumers of this information can access this information in a "
"conventional way."
msgstr ""

#: ../../source/Concepts/Advanced/About-Build-System.rst:125
msgid ""
"The ``ament_cmake_core`` |package| also provides features of the "
"``ament`` build system like symbolic link installation, which allows you "
"to symbolically link files from either the source space or the build "
"space into the install space rather than copying them. This allows you to"
" install once and then edit non-generated resources like Python code and "
"configuration files without having to rerun the install step for them to "
"take effect. This feature essentially replaces the \"devel space\" from "
"``catkin`` because it has most of the advantages with few of the "
"complications or drawbacks."
msgstr ""

#: ../../source/Concepts/Advanced/About-Build-System.rst:129
msgid ""
"Another feature provided by ``ament_cmake_core`` is the |package| "
"resource indexing which is a way for |packages| to indicate that they "
"contain a resource of some type. The design of this feature makes it much"
" more efficient to answer simple questions like what |packages| are in "
"this prefix (e.g. ``/usr/local``) because it only requires that you list "
"the files in a single possible location under that prefix. You can read "
"more about this feature in the `design docs "
"<https://github.com/ament/ament_cmake/blob/rolling/ament_cmake_core/doc/resource_index.md>`_"
" for the resource index."
msgstr ""

#: ../../source/Concepts/Advanced/About-Build-System.rst:133
msgid ""
"Like ``catkin``, ``ament_cmake_core`` also provides environment setup "
"files and |package| specific environment hooks. The environment setup "
"files, often named something like ``setup.bash``, are a place for "
"|package| developers to define changes to the environment that are needed"
" to utilize their |package|. The developers are able to do this using an "
"\"environment hook\" which is basically an arbitrary bit of shell code "
"that can set or modify environment variables, define shell functions, "
"setup auto-completion rules, etc... This feature is how, for example, ROS"
" 1 set the ``ROS_DISTRO`` environment variable without ``catkin`` knowing"
" anything about the ROS distribution."
msgstr ""

#: ../../source/Concepts/Advanced/About-Build-System.rst:139
msgid "The ``ament_lint`` repository"
msgstr ""

#: ../../source/Concepts/Advanced/About-Build-System.rst:141
msgid ""
"Located on |GitHub|_ at `ament/ament_lint "
"<https://github.com/ament/ament_lint>`_, this repository provides several"
" |packages| which provide linting and testing services in a convenient "
"and consistent manner. Currently there are |packages| to support C++ "
"style linting using ``uncrustify``, static C++ code checks using "
"``cppcheck``, checking for copyright in source code, Python style linting"
" using ``pep8``, and other things. The list of helper packages will "
"likely grow in the future."
msgstr ""

#: ../../source/Concepts/Advanced/About-Build-System.rst:146
msgid "Meta-build tool"
msgstr ""

#: ../../source/Concepts/Advanced/About-Build-System.rst:148
msgid ""
"This is a piece of software that knows how to topologically order a group"
" of packages, and build or test them in the correct dependency order. "
"This software will call into the Build Tool to do the actual work of "
"compiling, testing, and installing the package."
msgstr ""

#: ../../source/Concepts/Advanced/About-Build-System.rst:151
msgid ""
"In ROS 2, the tool named `colcon "
"<https://colcon.readthedocs.io/en/released/>`__ is used for this."
msgstr ""

