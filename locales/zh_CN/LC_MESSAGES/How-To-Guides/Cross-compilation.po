# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2023, Open Robotics
# This file is distributed under the same license as the ROS 2 documentation
# package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2023.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: ROS 2 documentation \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2023-12-08 06:20+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language: zh_CN\n"
"Language-Team: zh_CN <LL@li.org>\n"
"Plural-Forms: nplurals=1; plural=0;\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.12.1\n"

#: ../../source/How-To-Guides/Cross-compilation.rst:7
msgid "Cross-compilation"
msgstr ""

#: ../../source/How-To-Guides/Cross-compilation.rst:11
msgid "Table of Contents"
msgstr ""

#: ../../source/How-To-Guides/Cross-compilation.rst:13
msgid ""
"For background information on cross-compilation, see the :doc:`conceptual"
" article <../Concepts/Intermediate/About-Cross-Compilation>`."
msgstr ""

#: ../../source/How-To-Guides/Cross-compilation.rst:15
msgid ""
"This document provides you with details on how to cross-compile the ROS 2"
" software stack as well as provide examples for cross-compiling to "
"systems based on the Arm cores."
msgstr ""

#: ../../source/How-To-Guides/Cross-compilation.rst:18
msgid "cross_compile tool"
msgstr ""

#: ../../source/How-To-Guides/Cross-compilation.rst:20
msgid ""
"Instructions to use the tool are in the `cross_compile package "
"<https://github.com/ros-tooling/cross_compile>`__."
msgstr ""

#: ../../source/How-To-Guides/Cross-compilation.rst:23
msgid "Legacy tool instructions"
msgstr ""

#: ../../source/How-To-Guides/Cross-compilation.rst:25
msgid ""
"Follow the steps below only if you are using the old version (release "
"`0.0.1 <https://github.com/ros-"
"tooling/cross_compile/releases/tag/0.0.1>`__) of the cross-compile tool. "
"For all other purposes, follow the `cross_compile <https://github.com"
"/ros-tooling/cross_compile>`__ package documentation."
msgstr ""

#: ../../source/How-To-Guides/Cross-compilation.rst:29
msgid ""
"Although ROS 2 is a rich software stack with a number of dependencies, it"
" primarily uses two different types of packages:"
msgstr ""

#: ../../source/How-To-Guides/Cross-compilation.rst:28
msgid "Python based software, which requires no cross-compilation."
msgstr ""

#: ../../source/How-To-Guides/Cross-compilation.rst:29
msgid "CMake based software, which provides a mechanism to do cross-compilation."
msgstr ""

#: ../../source/How-To-Guides/Cross-compilation.rst:31
msgid ""
"Furthermore, the ROS 2 software stack is built with `Colcon "
"<https://github.com/colcon/colcon-core>`__ which provides a mechanism to "
"forward parameters to the CMake instance used for the individual build of"
" each package/library that is part of the ROS 2 distribution."
msgstr ""

#: ../../source/How-To-Guides/Cross-compilation.rst:33
msgid ""
"When building ROS 2 natively, the developer is required to download all "
"the dependencies (e.g. Python and other libraries) before compiling the "
"packages that are part of the ROS 2 distribution. When cross-compiling, "
"the same approach is required. The developer must first have the target "
"system's filesystem with all dependencies already installed."
msgstr ""

#: ../../source/How-To-Guides/Cross-compilation.rst:35
msgid ""
"The next sections of this document explain in detail the use of `cmake-"
"toolchains <https://cmake.org/cmake/help/latest/manual/cmake-"
"toolchains.7.html>`__ and the `CMAKE_SYSROOT "
"<https://cmake.org/cmake/help/latest/variable/CMAKE_SYSROOT.html>`__ "
"feature to cross-compile ROS 2."
msgstr ""

#: ../../source/How-To-Guides/Cross-compilation.rst:38
msgid "CMake toolchain-file"
msgstr ""

#: ../../source/How-To-Guides/Cross-compilation.rst:40
msgid ""
"A CMake toolchain-file is a file which defines variables to configure "
"CMake for cross-compilation. The basic entries are:"
msgstr ""

#: ../../source/How-To-Guides/Cross-compilation.rst:42
msgid "``CMAKE_SYSTEM_NAME``: the target platform, e.g. ``linux``"
msgstr ""

#: ../../source/How-To-Guides/Cross-compilation.rst:43
msgid ""
"``CMAKE_SYSTEM_PROCESSOR``: the target architecture, e.g. ``aarch64`` or "
"``arm``"
msgstr ""

#: ../../source/How-To-Guides/Cross-compilation.rst:44
msgid "``CMAKE_SYSROOT``: the path to the target file-system"
msgstr ""

#: ../../source/How-To-Guides/Cross-compilation.rst:45
msgid "``CMAKE_C_COMPILER``: the C cross-compiler, e.g. ``aarch64-linux-gnu-gcc``"
msgstr ""

#: ../../source/How-To-Guides/Cross-compilation.rst:46
msgid ""
"``CMAKE_CXX_COMPILER``: the C++ cross-compiler, e.g. ``aarch64-linux-"
"gnu-g++``"
msgstr ""

#: ../../source/How-To-Guides/Cross-compilation.rst:47
msgid ""
"``CMAKE_FIND_ROOT_PATH``: an alternative path used by the ``find_*`` "
"command to find the file-system"
msgstr ""

#: ../../source/How-To-Guides/Cross-compilation.rst:49
msgid "When cross-compiling ROS 2, the following options are required to be set:"
msgstr ""

#: ../../source/How-To-Guides/Cross-compilation.rst:51
msgid ""
"``CMAKE_FIND_ROOT_PATH``: the alternative path used by the ``find_*`` "
"command, use it to specify the path to ROS 2 ``/install`` folder"
msgstr ""

#: ../../source/How-To-Guides/Cross-compilation.rst:52
msgid ""
"``CMAKE_FIND_ROOT_PATH_MODE_*``: the search strategy for "
"program,package,library, and include, usually: ``NEVER`` (look on the "
"host-fs), ``ONLY`` (look on sysroot), and ``BOTH`` (look on both sysroot "
"and host-fs)"
msgstr ""

#: ../../source/How-To-Guides/Cross-compilation.rst:53
msgid ""
"``PYTHON_SOABI``: the index name of the python libraries generated by ROS"
" 2, e.g. ``cpython-36m-aarch64-linux-gnu``"
msgstr ""

#: ../../source/How-To-Guides/Cross-compilation.rst:54
msgid ""
"``THREADS_PTHREAD_ARG \"0\" CACHE STRING \"Result from TRY_RUN\" FORCE``:"
" Force the result of the ``TRY_RUN`` cmd to 0 (success) because binaries "
"can not run on the host system."
msgstr ""

#: ../../source/How-To-Guides/Cross-compilation.rst:56
msgid ""
"The toolchain-file is provided to CMake with the "
"``-DCMAKE_TOOLCHAIN_FILE=path/to/file`` parameter. This will also set the"
" ``CMAKE_CROSSCOMPILING`` variable to ``true`` which can be used by the "
"software being built."
msgstr ""

#: ../../source/How-To-Guides/Cross-compilation.rst:58
msgid ""
"The ``CMAKE_SYSROOT`` is particularly important for ROS 2 as the packages"
" need many dependencies (e.g. python, openssl, opencv, poco, eigen3, "
"...). Setting ``CMAKE_SYSROOT`` to a target file-system with all the "
"dependencies installed on it will allow CMake to find them during the "
"cross-compilation."
msgstr ""

#: ../../source/How-To-Guides/Cross-compilation.rst:61
msgid ""
"You can find more information on the CMake `documentation "
"<https://cmake.org/cmake/help/latest/manual/cmake-toolchains.7.html>`__ "
"page."
msgstr ""

#: ../../source/How-To-Guides/Cross-compilation.rst:63
msgid ""
"When downloading the ROS 2 source code, a generic toolchain-file is "
"available in the repository `ros-tooling/cross_compile/cmake-toolchains "
"<https://github.com/ros-tooling/cross_compile>`__ which can be downloaded"
" separately. Further examples on using it can be found on the `Cross-"
"compiling examples for Arm`_ section."
msgstr ""

#: ../../source/How-To-Guides/Cross-compilation.rst:66
msgid "Target file-system"
msgstr ""

#: ../../source/How-To-Guides/Cross-compilation.rst:68
msgid ""
"As mentioned previously, ROS 2 requires different libraries which needs "
"to be provided to cross-compile."
msgstr ""

#: ../../source/How-To-Guides/Cross-compilation.rst:73
msgid "There are a number of ways to obtain the file-system:"
msgstr ""

#: ../../source/How-To-Guides/Cross-compilation.rst:71
msgid "downloading a pre-built image"
msgstr ""

#: ../../source/How-To-Guides/Cross-compilation.rst:72
msgid ""
"installing the dependencies on the target and exporting the file-system "
"(e.g. with sshfs)"
msgstr ""

#: ../../source/How-To-Guides/Cross-compilation.rst:73
msgid ""
"using qemu + docker (or chroot) to generate the file-system on the host "
"machine."
msgstr ""

#: ../../source/How-To-Guides/Cross-compilation.rst:75
msgid ""
"You can find information on how to use Docker + qemu on the next `Cross-"
"compiling examples for Arm`_ section."
msgstr ""

#: ../../source/How-To-Guides/Cross-compilation.rst:78
msgid "Build process"
msgstr ""

#: ../../source/How-To-Guides/Cross-compilation.rst:80
msgid ""
"The build process is similar to native compilation. The only difference "
"is an extra argument to ``Colcon`` to specify the ``toolchain-file``:"
msgstr ""

#: ../../source/How-To-Guides/Cross-compilation.rst:89
msgid ""
"The ``toolchain-file`` provide to CMake the information of the ``cross-"
"compiler`` and the ``target file-system``. ``Colcon`` will call CMake "
"with the given toolchain-file on every package of ROS 2."
msgstr ""

#: ../../source/How-To-Guides/Cross-compilation.rst:93
msgid "Cross-compiling examples for Arm"
msgstr ""

#: ../../source/How-To-Guides/Cross-compilation.rst:94
msgid ""
"After :doc:`downloading the ROS 2 source code "
"<../Installation/Alternatives/Ubuntu-Development-Setup>`, you can add "
"cross-compilation assets to the workspace via ``git clone "
"https://github.com/ros-tooling/cross_compile.git -b 0.0.1 "
"src/ros2/cross_compile``. These are working examples on how to cross-"
"compile for Arm cores."
msgstr ""

#: ../../source/How-To-Guides/Cross-compilation.rst:98
msgid "The following targets are supported:"
msgstr ""

#: ../../source/How-To-Guides/Cross-compilation.rst:97
msgid "Ubuntu-arm64: To be used with any ARMv8-A based system."
msgstr ""

#: ../../source/How-To-Guides/Cross-compilation.rst:98
msgid "Ubuntu-armhf: To be used with any modern ARMv7-A based system."
msgstr ""

#: ../../source/How-To-Guides/Cross-compilation.rst:105
msgid "These are the main steps:"
msgstr ""

#: ../../source/How-To-Guides/Cross-compilation.rst:101
msgid "Installing development tools"
msgstr ""

#: ../../source/How-To-Guides/Cross-compilation.rst:102
msgid "Downloading ROS 2 source code"
msgstr ""

#: ../../source/How-To-Guides/Cross-compilation.rst:103
msgid "Downloading the ROS 2 cross-compilation assets"
msgstr ""

#: ../../source/How-To-Guides/Cross-compilation.rst:104
msgid "Preparing the sysroot"
msgstr ""

#: ../../source/How-To-Guides/Cross-compilation.rst:105
msgid "Cross-compiling the ROS 2 software stack"
msgstr ""

#: ../../source/How-To-Guides/Cross-compilation.rst:107
msgid ""
"The next sections explains in detail each of these steps. For a quick-"
"setup, have a look at the `Automated Cross-compilation`_."
msgstr ""

#: ../../source/How-To-Guides/Cross-compilation.rst:110
msgid "These steps were tested on an Ubuntu 18.04 (Bionic)"
msgstr ""

#: ../../source/How-To-Guides/Cross-compilation.rst:113
msgid "1. Install development tools"
msgstr ""

#: ../../source/How-To-Guides/Cross-compilation.rst:115
msgid ""
"This step is similar to when building natively. The difference is that "
"some of the libraries and tools are not required because they will be in "
"the sysroot instead. The following packages are required"
msgstr ""

#: ../../source/How-To-Guides/Cross-compilation.rst:134
msgid ""
"You can install vcstool and colcon-common-extensions via pip. This means "
"you are not required to add extra apt repositories."
msgstr ""

#: ../../source/How-To-Guides/Cross-compilation.rst:137
msgid ""
"Docker is used to build the target environment. Follow the official "
"`documentation <https://docs.docker.com/install/linux/docker-"
"ce/ubuntu/>`__ for the installation."
msgstr ""

#: ../../source/How-To-Guides/Cross-compilation.rst:140
msgid "2. Download ROS 2 source code"
msgstr ""

#: ../../source/How-To-Guides/Cross-compilation.rst:142
msgid "Then create a workspace and download the ROS 2 source code:"
msgstr ""

#: ../../source/How-To-Guides/Cross-compilation.rst:154
msgid "3. Prepare the sysroot"
msgstr ""

#: ../../source/How-To-Guides/Cross-compilation.rst:156
msgid ""
"Build an arm Ubuntu image with all the ROS 2 dependencies using Docker "
"and qemu: Copy the ``qemu-static`` binary to the workspace. It will be "
"used to install the ROS 2 dependencies on the target file-system with "
"docker."
msgstr ""

#: ../../source/How-To-Guides/Cross-compilation.rst:165
msgid ""
"The standard :doc:`setup <../Installation/Alternatives/Ubuntu-"
"Development-Setup>` process of ROS 2 is run inside an arm docker. This is"
" possible thanks to ``qemu-static``, which will emulate an arm machine. "
"The base image used is an Ubuntu Bionic from Docker Hub."
msgstr ""

#: ../../source/How-To-Guides/Cross-compilation.rst:172
msgid "Export the resulting container to a tarball and extract it:"
msgstr ""

#: ../../source/How-To-Guides/Cross-compilation.rst:181
msgid ""
"This container can be used later as virtual target to run the created "
"file-system and run the demo code."
msgstr ""

#: ../../source/How-To-Guides/Cross-compilation.rst:184
msgid "4. Build"
msgstr ""

#: ../../source/How-To-Guides/Cross-compilation.rst:186
msgid "Set the variables used by the generic toolchain-file"
msgstr ""

#: ../../source/How-To-Guides/Cross-compilation.rst:199
msgid ""
"The following packages still cause errors during the cross-compilation "
"(under investigation) and must be disabled for now."
msgstr ""

#: ../../source/How-To-Guides/Cross-compilation.rst:207
msgid ""
"The ``Poco`` pre-built has a known issue where it is searching for "
"``libz`` and ``libpcre`` on the host system instead of SYSROOT. As a "
"workaround for the moment, please link both libraries into the the host's"
" file-system."
msgstr ""

#: ../../source/How-To-Guides/Cross-compilation.rst:216
msgid "Then, start a build with colcon specifying the toolchain-file:"
msgstr ""

#: ../../source/How-To-Guides/Cross-compilation.rst:229
msgid ""
"Done! The install and build directories will contain the cross-compiled "
"assets."
msgstr ""

#: ../../source/How-To-Guides/Cross-compilation.rst:232
msgid "Automated Cross-compilation"
msgstr ""

#: ../../source/How-To-Guides/Cross-compilation.rst:234
msgid ""
"All the steps above are also included into a Dockerfile and can be used "
"for automation/CI."
msgstr ""

#: ../../source/How-To-Guides/Cross-compilation.rst:236
msgid "First, download the dockerfile and build the image:"
msgstr ""

#: ../../source/How-To-Guides/Cross-compilation.rst:243
msgid "Now run the image with: (it will take a while !)"
msgstr ""

#: ../../source/How-To-Guides/Cross-compilation.rst:252
msgid "..note:: The -v /var/run/docker.sock allow us to use Docker inside Docker."
msgstr ""

#: ../../source/How-To-Guides/Cross-compilation.rst:254
msgid ""
"The result of the build will be inside the ``ros2_ws`` directory, which "
"can be exported with:"
msgstr ""

#: ../../source/How-To-Guides/Cross-compilation.rst:261
msgid "Cross-compiling against a pre-built ROS 2"
msgstr ""

#: ../../source/How-To-Guides/Cross-compilation.rst:263
msgid ""
"It is possible to cross-compile your packages against a pre-built ROS 2. "
"The steps are similar to the previous `Cross-compiling examples for Arm`_"
" section, with the following modifications:"
msgstr ""

#: ../../source/How-To-Guides/Cross-compilation.rst:265
msgid ""
"Instead of downloading the ROS 2 stack, just populate your workspace with"
" your package (ros2 examples on this case) and the cross-compilation "
"assets:"
msgstr ""

#: ../../source/How-To-Guides/Cross-compilation.rst:275
msgid ""
"Generate and export the file-system as described in `3. Prepare the "
"sysroot`_, but with the provided ``Dockerfile_ubuntu_arm64_prebuilt``. "
"These ``_prebuilt`` Dockerfile will use the :doc:`binary packages "
"<../Installation/Ubuntu-Install-Debians>` to install ROS 2 instead of "
"building from source."
msgstr ""

#: ../../source/How-To-Guides/Cross-compilation.rst:277
msgid ""
"Modify the environment variable ``ROS2_INSTALL_PATH`` to point to the "
"installation directory:"
msgstr ""

#: ../../source/How-To-Guides/Cross-compilation.rst:283
msgid "Source the ``setup.bash`` script on the target file-system:"
msgstr ""

#: ../../source/How-To-Guides/Cross-compilation.rst:289
msgid "Then, start a build with ``Colcon`` specifying the ``toolchain-file``:"
msgstr ""

#: ../../source/How-To-Guides/Cross-compilation.rst:301
msgid "Run on the target"
msgstr ""

#: ../../source/How-To-Guides/Cross-compilation.rst:303
msgid ""
"Copy the file-system on your target or use the previously built docker "
"image:"
msgstr ""

#: ../../source/How-To-Guides/Cross-compilation.rst:309
msgid "Source the environment:"
msgstr ""

#: ../../source/How-To-Guides/Cross-compilation.rst:315
msgid "Run some of the C++ or python examples:"
msgstr ""

